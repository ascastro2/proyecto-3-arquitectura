
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Notificacion
 * 
 */
export type Notificacion = $Result.DefaultSelection<Prisma.$NotificacionPayload>
/**
 * Model Plantilla
 * 
 */
export type Plantilla = $Result.DefaultSelection<Prisma.$PlantillaPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const TipoNotificacion: {
  AGENDAMIENTO: 'AGENDAMIENTO',
  MODIFICACION: 'MODIFICACION',
  CANCELACION: 'CANCELACION',
  RECORDATORIO: 'RECORDATORIO',
  CONFIRMACION: 'CONFIRMACION'
};

export type TipoNotificacion = (typeof TipoNotificacion)[keyof typeof TipoNotificacion]


export const CanalNotificacion: {
  EMAIL: 'EMAIL',
  SMS: 'SMS'
};

export type CanalNotificacion = (typeof CanalNotificacion)[keyof typeof CanalNotificacion]


export const EstadoNotificacion: {
  PENDIENTE: 'PENDIENTE',
  ENVIANDO: 'ENVIANDO',
  ENVIADO: 'ENVIADO',
  FALLIDO: 'FALLIDO',
  CANCELADO: 'CANCELADO'
};

export type EstadoNotificacion = (typeof EstadoNotificacion)[keyof typeof EstadoNotificacion]

}

export type TipoNotificacion = $Enums.TipoNotificacion

export const TipoNotificacion: typeof $Enums.TipoNotificacion

export type CanalNotificacion = $Enums.CanalNotificacion

export const CanalNotificacion: typeof $Enums.CanalNotificacion

export type EstadoNotificacion = $Enums.EstadoNotificacion

export const EstadoNotificacion: typeof $Enums.EstadoNotificacion

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Notificacions
 * const notificacions = await prisma.notificacion.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Notificacions
   * const notificacions = await prisma.notificacion.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.notificacion`: Exposes CRUD operations for the **Notificacion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notificacions
    * const notificacions = await prisma.notificacion.findMany()
    * ```
    */
  get notificacion(): Prisma.NotificacionDelegate<ExtArgs>;

  /**
   * `prisma.plantilla`: Exposes CRUD operations for the **Plantilla** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Plantillas
    * const plantillas = await prisma.plantilla.findMany()
    * ```
    */
  get plantilla(): Prisma.PlantillaDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Notificacion: 'Notificacion',
    Plantilla: 'Plantilla'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "notificacion" | "plantilla"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Notificacion: {
        payload: Prisma.$NotificacionPayload<ExtArgs>
        fields: Prisma.NotificacionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificacionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificacionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacionPayload>
          }
          findFirst: {
            args: Prisma.NotificacionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificacionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacionPayload>
          }
          findMany: {
            args: Prisma.NotificacionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacionPayload>[]
          }
          create: {
            args: Prisma.NotificacionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacionPayload>
          }
          createMany: {
            args: Prisma.NotificacionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificacionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacionPayload>[]
          }
          delete: {
            args: Prisma.NotificacionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacionPayload>
          }
          update: {
            args: Prisma.NotificacionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacionPayload>
          }
          deleteMany: {
            args: Prisma.NotificacionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificacionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificacionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificacionPayload>
          }
          aggregate: {
            args: Prisma.NotificacionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificacion>
          }
          groupBy: {
            args: Prisma.NotificacionGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificacionGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificacionCountArgs<ExtArgs>
            result: $Utils.Optional<NotificacionCountAggregateOutputType> | number
          }
        }
      }
      Plantilla: {
        payload: Prisma.$PlantillaPayload<ExtArgs>
        fields: Prisma.PlantillaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlantillaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantillaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlantillaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantillaPayload>
          }
          findFirst: {
            args: Prisma.PlantillaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantillaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlantillaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantillaPayload>
          }
          findMany: {
            args: Prisma.PlantillaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantillaPayload>[]
          }
          create: {
            args: Prisma.PlantillaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantillaPayload>
          }
          createMany: {
            args: Prisma.PlantillaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlantillaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantillaPayload>[]
          }
          delete: {
            args: Prisma.PlantillaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantillaPayload>
          }
          update: {
            args: Prisma.PlantillaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantillaPayload>
          }
          deleteMany: {
            args: Prisma.PlantillaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlantillaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlantillaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlantillaPayload>
          }
          aggregate: {
            args: Prisma.PlantillaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlantilla>
          }
          groupBy: {
            args: Prisma.PlantillaGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlantillaGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlantillaCountArgs<ExtArgs>
            result: $Utils.Optional<PlantillaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Notificacion
   */

  export type AggregateNotificacion = {
    _count: NotificacionCountAggregateOutputType | null
    _avg: NotificacionAvgAggregateOutputType | null
    _sum: NotificacionSumAggregateOutputType | null
    _min: NotificacionMinAggregateOutputType | null
    _max: NotificacionMaxAggregateOutputType | null
  }

  export type NotificacionAvgAggregateOutputType = {
    id: number | null
    intentos: number | null
    pacienteId: number | null
    medicoId: number | null
    turnoId: number | null
  }

  export type NotificacionSumAggregateOutputType = {
    id: number | null
    intentos: number | null
    pacienteId: number | null
    medicoId: number | null
    turnoId: number | null
  }

  export type NotificacionMinAggregateOutputType = {
    id: number | null
    tipo: $Enums.TipoNotificacion | null
    canal: $Enums.CanalNotificacion | null
    destinatario: string | null
    asunto: string | null
    contenido: string | null
    estado: $Enums.EstadoNotificacion | null
    intentos: number | null
    fechaEnvio: Date | null
    fechaCreacion: Date | null
    fechaActualizacion: Date | null
    pacienteId: number | null
    medicoId: number | null
    turnoId: number | null
    eventoId: string | null
    respuesta: string | null
    error: string | null
  }

  export type NotificacionMaxAggregateOutputType = {
    id: number | null
    tipo: $Enums.TipoNotificacion | null
    canal: $Enums.CanalNotificacion | null
    destinatario: string | null
    asunto: string | null
    contenido: string | null
    estado: $Enums.EstadoNotificacion | null
    intentos: number | null
    fechaEnvio: Date | null
    fechaCreacion: Date | null
    fechaActualizacion: Date | null
    pacienteId: number | null
    medicoId: number | null
    turnoId: number | null
    eventoId: string | null
    respuesta: string | null
    error: string | null
  }

  export type NotificacionCountAggregateOutputType = {
    id: number
    tipo: number
    canal: number
    destinatario: number
    asunto: number
    contenido: number
    estado: number
    intentos: number
    fechaEnvio: number
    fechaCreacion: number
    fechaActualizacion: number
    pacienteId: number
    medicoId: number
    turnoId: number
    eventoId: number
    respuesta: number
    error: number
    _all: number
  }


  export type NotificacionAvgAggregateInputType = {
    id?: true
    intentos?: true
    pacienteId?: true
    medicoId?: true
    turnoId?: true
  }

  export type NotificacionSumAggregateInputType = {
    id?: true
    intentos?: true
    pacienteId?: true
    medicoId?: true
    turnoId?: true
  }

  export type NotificacionMinAggregateInputType = {
    id?: true
    tipo?: true
    canal?: true
    destinatario?: true
    asunto?: true
    contenido?: true
    estado?: true
    intentos?: true
    fechaEnvio?: true
    fechaCreacion?: true
    fechaActualizacion?: true
    pacienteId?: true
    medicoId?: true
    turnoId?: true
    eventoId?: true
    respuesta?: true
    error?: true
  }

  export type NotificacionMaxAggregateInputType = {
    id?: true
    tipo?: true
    canal?: true
    destinatario?: true
    asunto?: true
    contenido?: true
    estado?: true
    intentos?: true
    fechaEnvio?: true
    fechaCreacion?: true
    fechaActualizacion?: true
    pacienteId?: true
    medicoId?: true
    turnoId?: true
    eventoId?: true
    respuesta?: true
    error?: true
  }

  export type NotificacionCountAggregateInputType = {
    id?: true
    tipo?: true
    canal?: true
    destinatario?: true
    asunto?: true
    contenido?: true
    estado?: true
    intentos?: true
    fechaEnvio?: true
    fechaCreacion?: true
    fechaActualizacion?: true
    pacienteId?: true
    medicoId?: true
    turnoId?: true
    eventoId?: true
    respuesta?: true
    error?: true
    _all?: true
  }

  export type NotificacionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notificacion to aggregate.
     */
    where?: NotificacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notificacions to fetch.
     */
    orderBy?: NotificacionOrderByWithRelationInput | NotificacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notificacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notificacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notificacions
    **/
    _count?: true | NotificacionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificacionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificacionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificacionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificacionMaxAggregateInputType
  }

  export type GetNotificacionAggregateType<T extends NotificacionAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificacion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificacion[P]>
      : GetScalarType<T[P], AggregateNotificacion[P]>
  }




  export type NotificacionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificacionWhereInput
    orderBy?: NotificacionOrderByWithAggregationInput | NotificacionOrderByWithAggregationInput[]
    by: NotificacionScalarFieldEnum[] | NotificacionScalarFieldEnum
    having?: NotificacionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificacionCountAggregateInputType | true
    _avg?: NotificacionAvgAggregateInputType
    _sum?: NotificacionSumAggregateInputType
    _min?: NotificacionMinAggregateInputType
    _max?: NotificacionMaxAggregateInputType
  }

  export type NotificacionGroupByOutputType = {
    id: number
    tipo: $Enums.TipoNotificacion
    canal: $Enums.CanalNotificacion
    destinatario: string
    asunto: string | null
    contenido: string
    estado: $Enums.EstadoNotificacion
    intentos: number
    fechaEnvio: Date | null
    fechaCreacion: Date
    fechaActualizacion: Date
    pacienteId: number | null
    medicoId: number | null
    turnoId: number | null
    eventoId: string | null
    respuesta: string | null
    error: string | null
    _count: NotificacionCountAggregateOutputType | null
    _avg: NotificacionAvgAggregateOutputType | null
    _sum: NotificacionSumAggregateOutputType | null
    _min: NotificacionMinAggregateOutputType | null
    _max: NotificacionMaxAggregateOutputType | null
  }

  type GetNotificacionGroupByPayload<T extends NotificacionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificacionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificacionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificacionGroupByOutputType[P]>
            : GetScalarType<T[P], NotificacionGroupByOutputType[P]>
        }
      >
    >


  export type NotificacionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    canal?: boolean
    destinatario?: boolean
    asunto?: boolean
    contenido?: boolean
    estado?: boolean
    intentos?: boolean
    fechaEnvio?: boolean
    fechaCreacion?: boolean
    fechaActualizacion?: boolean
    pacienteId?: boolean
    medicoId?: boolean
    turnoId?: boolean
    eventoId?: boolean
    respuesta?: boolean
    error?: boolean
  }, ExtArgs["result"]["notificacion"]>

  export type NotificacionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    canal?: boolean
    destinatario?: boolean
    asunto?: boolean
    contenido?: boolean
    estado?: boolean
    intentos?: boolean
    fechaEnvio?: boolean
    fechaCreacion?: boolean
    fechaActualizacion?: boolean
    pacienteId?: boolean
    medicoId?: boolean
    turnoId?: boolean
    eventoId?: boolean
    respuesta?: boolean
    error?: boolean
  }, ExtArgs["result"]["notificacion"]>

  export type NotificacionSelectScalar = {
    id?: boolean
    tipo?: boolean
    canal?: boolean
    destinatario?: boolean
    asunto?: boolean
    contenido?: boolean
    estado?: boolean
    intentos?: boolean
    fechaEnvio?: boolean
    fechaCreacion?: boolean
    fechaActualizacion?: boolean
    pacienteId?: boolean
    medicoId?: boolean
    turnoId?: boolean
    eventoId?: boolean
    respuesta?: boolean
    error?: boolean
  }


  export type $NotificacionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notificacion"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tipo: $Enums.TipoNotificacion
      canal: $Enums.CanalNotificacion
      destinatario: string
      asunto: string | null
      contenido: string
      estado: $Enums.EstadoNotificacion
      intentos: number
      fechaEnvio: Date | null
      fechaCreacion: Date
      fechaActualizacion: Date
      pacienteId: number | null
      medicoId: number | null
      turnoId: number | null
      eventoId: string | null
      respuesta: string | null
      error: string | null
    }, ExtArgs["result"]["notificacion"]>
    composites: {}
  }

  type NotificacionGetPayload<S extends boolean | null | undefined | NotificacionDefaultArgs> = $Result.GetResult<Prisma.$NotificacionPayload, S>

  type NotificacionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificacionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificacionCountAggregateInputType | true
    }

  export interface NotificacionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notificacion'], meta: { name: 'Notificacion' } }
    /**
     * Find zero or one Notificacion that matches the filter.
     * @param {NotificacionFindUniqueArgs} args - Arguments to find a Notificacion
     * @example
     * // Get one Notificacion
     * const notificacion = await prisma.notificacion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificacionFindUniqueArgs>(args: SelectSubset<T, NotificacionFindUniqueArgs<ExtArgs>>): Prisma__NotificacionClient<$Result.GetResult<Prisma.$NotificacionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notificacion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificacionFindUniqueOrThrowArgs} args - Arguments to find a Notificacion
     * @example
     * // Get one Notificacion
     * const notificacion = await prisma.notificacion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificacionFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificacionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificacionClient<$Result.GetResult<Prisma.$NotificacionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notificacion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacionFindFirstArgs} args - Arguments to find a Notificacion
     * @example
     * // Get one Notificacion
     * const notificacion = await prisma.notificacion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificacionFindFirstArgs>(args?: SelectSubset<T, NotificacionFindFirstArgs<ExtArgs>>): Prisma__NotificacionClient<$Result.GetResult<Prisma.$NotificacionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notificacion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacionFindFirstOrThrowArgs} args - Arguments to find a Notificacion
     * @example
     * // Get one Notificacion
     * const notificacion = await prisma.notificacion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificacionFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificacionFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificacionClient<$Result.GetResult<Prisma.$NotificacionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notificacions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notificacions
     * const notificacions = await prisma.notificacion.findMany()
     * 
     * // Get first 10 Notificacions
     * const notificacions = await prisma.notificacion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificacionWithIdOnly = await prisma.notificacion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificacionFindManyArgs>(args?: SelectSubset<T, NotificacionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificacionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notificacion.
     * @param {NotificacionCreateArgs} args - Arguments to create a Notificacion.
     * @example
     * // Create one Notificacion
     * const Notificacion = await prisma.notificacion.create({
     *   data: {
     *     // ... data to create a Notificacion
     *   }
     * })
     * 
     */
    create<T extends NotificacionCreateArgs>(args: SelectSubset<T, NotificacionCreateArgs<ExtArgs>>): Prisma__NotificacionClient<$Result.GetResult<Prisma.$NotificacionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notificacions.
     * @param {NotificacionCreateManyArgs} args - Arguments to create many Notificacions.
     * @example
     * // Create many Notificacions
     * const notificacion = await prisma.notificacion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificacionCreateManyArgs>(args?: SelectSubset<T, NotificacionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notificacions and returns the data saved in the database.
     * @param {NotificacionCreateManyAndReturnArgs} args - Arguments to create many Notificacions.
     * @example
     * // Create many Notificacions
     * const notificacion = await prisma.notificacion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notificacions and only return the `id`
     * const notificacionWithIdOnly = await prisma.notificacion.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificacionCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificacionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificacionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notificacion.
     * @param {NotificacionDeleteArgs} args - Arguments to delete one Notificacion.
     * @example
     * // Delete one Notificacion
     * const Notificacion = await prisma.notificacion.delete({
     *   where: {
     *     // ... filter to delete one Notificacion
     *   }
     * })
     * 
     */
    delete<T extends NotificacionDeleteArgs>(args: SelectSubset<T, NotificacionDeleteArgs<ExtArgs>>): Prisma__NotificacionClient<$Result.GetResult<Prisma.$NotificacionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notificacion.
     * @param {NotificacionUpdateArgs} args - Arguments to update one Notificacion.
     * @example
     * // Update one Notificacion
     * const notificacion = await prisma.notificacion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificacionUpdateArgs>(args: SelectSubset<T, NotificacionUpdateArgs<ExtArgs>>): Prisma__NotificacionClient<$Result.GetResult<Prisma.$NotificacionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notificacions.
     * @param {NotificacionDeleteManyArgs} args - Arguments to filter Notificacions to delete.
     * @example
     * // Delete a few Notificacions
     * const { count } = await prisma.notificacion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificacionDeleteManyArgs>(args?: SelectSubset<T, NotificacionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notificacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notificacions
     * const notificacion = await prisma.notificacion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificacionUpdateManyArgs>(args: SelectSubset<T, NotificacionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notificacion.
     * @param {NotificacionUpsertArgs} args - Arguments to update or create a Notificacion.
     * @example
     * // Update or create a Notificacion
     * const notificacion = await prisma.notificacion.upsert({
     *   create: {
     *     // ... data to create a Notificacion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notificacion we want to update
     *   }
     * })
     */
    upsert<T extends NotificacionUpsertArgs>(args: SelectSubset<T, NotificacionUpsertArgs<ExtArgs>>): Prisma__NotificacionClient<$Result.GetResult<Prisma.$NotificacionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notificacions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacionCountArgs} args - Arguments to filter Notificacions to count.
     * @example
     * // Count the number of Notificacions
     * const count = await prisma.notificacion.count({
     *   where: {
     *     // ... the filter for the Notificacions we want to count
     *   }
     * })
    **/
    count<T extends NotificacionCountArgs>(
      args?: Subset<T, NotificacionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificacionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notificacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificacionAggregateArgs>(args: Subset<T, NotificacionAggregateArgs>): Prisma.PrismaPromise<GetNotificacionAggregateType<T>>

    /**
     * Group by Notificacion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificacionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificacionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificacionGroupByArgs['orderBy'] }
        : { orderBy?: NotificacionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificacionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificacionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notificacion model
   */
  readonly fields: NotificacionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notificacion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificacionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notificacion model
   */ 
  interface NotificacionFieldRefs {
    readonly id: FieldRef<"Notificacion", 'Int'>
    readonly tipo: FieldRef<"Notificacion", 'TipoNotificacion'>
    readonly canal: FieldRef<"Notificacion", 'CanalNotificacion'>
    readonly destinatario: FieldRef<"Notificacion", 'String'>
    readonly asunto: FieldRef<"Notificacion", 'String'>
    readonly contenido: FieldRef<"Notificacion", 'String'>
    readonly estado: FieldRef<"Notificacion", 'EstadoNotificacion'>
    readonly intentos: FieldRef<"Notificacion", 'Int'>
    readonly fechaEnvio: FieldRef<"Notificacion", 'DateTime'>
    readonly fechaCreacion: FieldRef<"Notificacion", 'DateTime'>
    readonly fechaActualizacion: FieldRef<"Notificacion", 'DateTime'>
    readonly pacienteId: FieldRef<"Notificacion", 'Int'>
    readonly medicoId: FieldRef<"Notificacion", 'Int'>
    readonly turnoId: FieldRef<"Notificacion", 'Int'>
    readonly eventoId: FieldRef<"Notificacion", 'String'>
    readonly respuesta: FieldRef<"Notificacion", 'String'>
    readonly error: FieldRef<"Notificacion", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Notificacion findUnique
   */
  export type NotificacionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacion
     */
    select?: NotificacionSelect<ExtArgs> | null
    /**
     * Filter, which Notificacion to fetch.
     */
    where: NotificacionWhereUniqueInput
  }

  /**
   * Notificacion findUniqueOrThrow
   */
  export type NotificacionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacion
     */
    select?: NotificacionSelect<ExtArgs> | null
    /**
     * Filter, which Notificacion to fetch.
     */
    where: NotificacionWhereUniqueInput
  }

  /**
   * Notificacion findFirst
   */
  export type NotificacionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacion
     */
    select?: NotificacionSelect<ExtArgs> | null
    /**
     * Filter, which Notificacion to fetch.
     */
    where?: NotificacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notificacions to fetch.
     */
    orderBy?: NotificacionOrderByWithRelationInput | NotificacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notificacions.
     */
    cursor?: NotificacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notificacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notificacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notificacions.
     */
    distinct?: NotificacionScalarFieldEnum | NotificacionScalarFieldEnum[]
  }

  /**
   * Notificacion findFirstOrThrow
   */
  export type NotificacionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacion
     */
    select?: NotificacionSelect<ExtArgs> | null
    /**
     * Filter, which Notificacion to fetch.
     */
    where?: NotificacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notificacions to fetch.
     */
    orderBy?: NotificacionOrderByWithRelationInput | NotificacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notificacions.
     */
    cursor?: NotificacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notificacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notificacions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notificacions.
     */
    distinct?: NotificacionScalarFieldEnum | NotificacionScalarFieldEnum[]
  }

  /**
   * Notificacion findMany
   */
  export type NotificacionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacion
     */
    select?: NotificacionSelect<ExtArgs> | null
    /**
     * Filter, which Notificacions to fetch.
     */
    where?: NotificacionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notificacions to fetch.
     */
    orderBy?: NotificacionOrderByWithRelationInput | NotificacionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notificacions.
     */
    cursor?: NotificacionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notificacions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notificacions.
     */
    skip?: number
    distinct?: NotificacionScalarFieldEnum | NotificacionScalarFieldEnum[]
  }

  /**
   * Notificacion create
   */
  export type NotificacionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacion
     */
    select?: NotificacionSelect<ExtArgs> | null
    /**
     * The data needed to create a Notificacion.
     */
    data: XOR<NotificacionCreateInput, NotificacionUncheckedCreateInput>
  }

  /**
   * Notificacion createMany
   */
  export type NotificacionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notificacions.
     */
    data: NotificacionCreateManyInput | NotificacionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notificacion createManyAndReturn
   */
  export type NotificacionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacion
     */
    select?: NotificacionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notificacions.
     */
    data: NotificacionCreateManyInput | NotificacionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notificacion update
   */
  export type NotificacionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacion
     */
    select?: NotificacionSelect<ExtArgs> | null
    /**
     * The data needed to update a Notificacion.
     */
    data: XOR<NotificacionUpdateInput, NotificacionUncheckedUpdateInput>
    /**
     * Choose, which Notificacion to update.
     */
    where: NotificacionWhereUniqueInput
  }

  /**
   * Notificacion updateMany
   */
  export type NotificacionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notificacions.
     */
    data: XOR<NotificacionUpdateManyMutationInput, NotificacionUncheckedUpdateManyInput>
    /**
     * Filter which Notificacions to update
     */
    where?: NotificacionWhereInput
  }

  /**
   * Notificacion upsert
   */
  export type NotificacionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacion
     */
    select?: NotificacionSelect<ExtArgs> | null
    /**
     * The filter to search for the Notificacion to update in case it exists.
     */
    where: NotificacionWhereUniqueInput
    /**
     * In case the Notificacion found by the `where` argument doesn't exist, create a new Notificacion with this data.
     */
    create: XOR<NotificacionCreateInput, NotificacionUncheckedCreateInput>
    /**
     * In case the Notificacion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificacionUpdateInput, NotificacionUncheckedUpdateInput>
  }

  /**
   * Notificacion delete
   */
  export type NotificacionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacion
     */
    select?: NotificacionSelect<ExtArgs> | null
    /**
     * Filter which Notificacion to delete.
     */
    where: NotificacionWhereUniqueInput
  }

  /**
   * Notificacion deleteMany
   */
  export type NotificacionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notificacions to delete
     */
    where?: NotificacionWhereInput
  }

  /**
   * Notificacion without action
   */
  export type NotificacionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notificacion
     */
    select?: NotificacionSelect<ExtArgs> | null
  }


  /**
   * Model Plantilla
   */

  export type AggregatePlantilla = {
    _count: PlantillaCountAggregateOutputType | null
    _avg: PlantillaAvgAggregateOutputType | null
    _sum: PlantillaSumAggregateOutputType | null
    _min: PlantillaMinAggregateOutputType | null
    _max: PlantillaMaxAggregateOutputType | null
  }

  export type PlantillaAvgAggregateOutputType = {
    id: number | null
  }

  export type PlantillaSumAggregateOutputType = {
    id: number | null
  }

  export type PlantillaMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    tipo: $Enums.TipoNotificacion | null
    canal: $Enums.CanalNotificacion | null
    asunto: string | null
    contenido: string | null
    activa: boolean | null
    fechaCreacion: Date | null
    fechaActualizacion: Date | null
  }

  export type PlantillaMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    tipo: $Enums.TipoNotificacion | null
    canal: $Enums.CanalNotificacion | null
    asunto: string | null
    contenido: string | null
    activa: boolean | null
    fechaCreacion: Date | null
    fechaActualizacion: Date | null
  }

  export type PlantillaCountAggregateOutputType = {
    id: number
    nombre: number
    tipo: number
    canal: number
    asunto: number
    contenido: number
    variables: number
    activa: number
    fechaCreacion: number
    fechaActualizacion: number
    _all: number
  }


  export type PlantillaAvgAggregateInputType = {
    id?: true
  }

  export type PlantillaSumAggregateInputType = {
    id?: true
  }

  export type PlantillaMinAggregateInputType = {
    id?: true
    nombre?: true
    tipo?: true
    canal?: true
    asunto?: true
    contenido?: true
    activa?: true
    fechaCreacion?: true
    fechaActualizacion?: true
  }

  export type PlantillaMaxAggregateInputType = {
    id?: true
    nombre?: true
    tipo?: true
    canal?: true
    asunto?: true
    contenido?: true
    activa?: true
    fechaCreacion?: true
    fechaActualizacion?: true
  }

  export type PlantillaCountAggregateInputType = {
    id?: true
    nombre?: true
    tipo?: true
    canal?: true
    asunto?: true
    contenido?: true
    variables?: true
    activa?: true
    fechaCreacion?: true
    fechaActualizacion?: true
    _all?: true
  }

  export type PlantillaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plantilla to aggregate.
     */
    where?: PlantillaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plantillas to fetch.
     */
    orderBy?: PlantillaOrderByWithRelationInput | PlantillaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlantillaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plantillas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plantillas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Plantillas
    **/
    _count?: true | PlantillaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlantillaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlantillaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlantillaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlantillaMaxAggregateInputType
  }

  export type GetPlantillaAggregateType<T extends PlantillaAggregateArgs> = {
        [P in keyof T & keyof AggregatePlantilla]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlantilla[P]>
      : GetScalarType<T[P], AggregatePlantilla[P]>
  }




  export type PlantillaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlantillaWhereInput
    orderBy?: PlantillaOrderByWithAggregationInput | PlantillaOrderByWithAggregationInput[]
    by: PlantillaScalarFieldEnum[] | PlantillaScalarFieldEnum
    having?: PlantillaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlantillaCountAggregateInputType | true
    _avg?: PlantillaAvgAggregateInputType
    _sum?: PlantillaSumAggregateInputType
    _min?: PlantillaMinAggregateInputType
    _max?: PlantillaMaxAggregateInputType
  }

  export type PlantillaGroupByOutputType = {
    id: number
    nombre: string
    tipo: $Enums.TipoNotificacion
    canal: $Enums.CanalNotificacion
    asunto: string | null
    contenido: string
    variables: string[]
    activa: boolean
    fechaCreacion: Date
    fechaActualizacion: Date
    _count: PlantillaCountAggregateOutputType | null
    _avg: PlantillaAvgAggregateOutputType | null
    _sum: PlantillaSumAggregateOutputType | null
    _min: PlantillaMinAggregateOutputType | null
    _max: PlantillaMaxAggregateOutputType | null
  }

  type GetPlantillaGroupByPayload<T extends PlantillaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlantillaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlantillaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlantillaGroupByOutputType[P]>
            : GetScalarType<T[P], PlantillaGroupByOutputType[P]>
        }
      >
    >


  export type PlantillaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    tipo?: boolean
    canal?: boolean
    asunto?: boolean
    contenido?: boolean
    variables?: boolean
    activa?: boolean
    fechaCreacion?: boolean
    fechaActualizacion?: boolean
  }, ExtArgs["result"]["plantilla"]>

  export type PlantillaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    tipo?: boolean
    canal?: boolean
    asunto?: boolean
    contenido?: boolean
    variables?: boolean
    activa?: boolean
    fechaCreacion?: boolean
    fechaActualizacion?: boolean
  }, ExtArgs["result"]["plantilla"]>

  export type PlantillaSelectScalar = {
    id?: boolean
    nombre?: boolean
    tipo?: boolean
    canal?: boolean
    asunto?: boolean
    contenido?: boolean
    variables?: boolean
    activa?: boolean
    fechaCreacion?: boolean
    fechaActualizacion?: boolean
  }


  export type $PlantillaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Plantilla"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      tipo: $Enums.TipoNotificacion
      canal: $Enums.CanalNotificacion
      asunto: string | null
      contenido: string
      variables: string[]
      activa: boolean
      fechaCreacion: Date
      fechaActualizacion: Date
    }, ExtArgs["result"]["plantilla"]>
    composites: {}
  }

  type PlantillaGetPayload<S extends boolean | null | undefined | PlantillaDefaultArgs> = $Result.GetResult<Prisma.$PlantillaPayload, S>

  type PlantillaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlantillaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlantillaCountAggregateInputType | true
    }

  export interface PlantillaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Plantilla'], meta: { name: 'Plantilla' } }
    /**
     * Find zero or one Plantilla that matches the filter.
     * @param {PlantillaFindUniqueArgs} args - Arguments to find a Plantilla
     * @example
     * // Get one Plantilla
     * const plantilla = await prisma.plantilla.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlantillaFindUniqueArgs>(args: SelectSubset<T, PlantillaFindUniqueArgs<ExtArgs>>): Prisma__PlantillaClient<$Result.GetResult<Prisma.$PlantillaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Plantilla that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlantillaFindUniqueOrThrowArgs} args - Arguments to find a Plantilla
     * @example
     * // Get one Plantilla
     * const plantilla = await prisma.plantilla.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlantillaFindUniqueOrThrowArgs>(args: SelectSubset<T, PlantillaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlantillaClient<$Result.GetResult<Prisma.$PlantillaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Plantilla that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantillaFindFirstArgs} args - Arguments to find a Plantilla
     * @example
     * // Get one Plantilla
     * const plantilla = await prisma.plantilla.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlantillaFindFirstArgs>(args?: SelectSubset<T, PlantillaFindFirstArgs<ExtArgs>>): Prisma__PlantillaClient<$Result.GetResult<Prisma.$PlantillaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Plantilla that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantillaFindFirstOrThrowArgs} args - Arguments to find a Plantilla
     * @example
     * // Get one Plantilla
     * const plantilla = await prisma.plantilla.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlantillaFindFirstOrThrowArgs>(args?: SelectSubset<T, PlantillaFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlantillaClient<$Result.GetResult<Prisma.$PlantillaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Plantillas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantillaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Plantillas
     * const plantillas = await prisma.plantilla.findMany()
     * 
     * // Get first 10 Plantillas
     * const plantillas = await prisma.plantilla.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const plantillaWithIdOnly = await prisma.plantilla.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlantillaFindManyArgs>(args?: SelectSubset<T, PlantillaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantillaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Plantilla.
     * @param {PlantillaCreateArgs} args - Arguments to create a Plantilla.
     * @example
     * // Create one Plantilla
     * const Plantilla = await prisma.plantilla.create({
     *   data: {
     *     // ... data to create a Plantilla
     *   }
     * })
     * 
     */
    create<T extends PlantillaCreateArgs>(args: SelectSubset<T, PlantillaCreateArgs<ExtArgs>>): Prisma__PlantillaClient<$Result.GetResult<Prisma.$PlantillaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Plantillas.
     * @param {PlantillaCreateManyArgs} args - Arguments to create many Plantillas.
     * @example
     * // Create many Plantillas
     * const plantilla = await prisma.plantilla.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlantillaCreateManyArgs>(args?: SelectSubset<T, PlantillaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Plantillas and returns the data saved in the database.
     * @param {PlantillaCreateManyAndReturnArgs} args - Arguments to create many Plantillas.
     * @example
     * // Create many Plantillas
     * const plantilla = await prisma.plantilla.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Plantillas and only return the `id`
     * const plantillaWithIdOnly = await prisma.plantilla.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlantillaCreateManyAndReturnArgs>(args?: SelectSubset<T, PlantillaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantillaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Plantilla.
     * @param {PlantillaDeleteArgs} args - Arguments to delete one Plantilla.
     * @example
     * // Delete one Plantilla
     * const Plantilla = await prisma.plantilla.delete({
     *   where: {
     *     // ... filter to delete one Plantilla
     *   }
     * })
     * 
     */
    delete<T extends PlantillaDeleteArgs>(args: SelectSubset<T, PlantillaDeleteArgs<ExtArgs>>): Prisma__PlantillaClient<$Result.GetResult<Prisma.$PlantillaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Plantilla.
     * @param {PlantillaUpdateArgs} args - Arguments to update one Plantilla.
     * @example
     * // Update one Plantilla
     * const plantilla = await prisma.plantilla.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlantillaUpdateArgs>(args: SelectSubset<T, PlantillaUpdateArgs<ExtArgs>>): Prisma__PlantillaClient<$Result.GetResult<Prisma.$PlantillaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Plantillas.
     * @param {PlantillaDeleteManyArgs} args - Arguments to filter Plantillas to delete.
     * @example
     * // Delete a few Plantillas
     * const { count } = await prisma.plantilla.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlantillaDeleteManyArgs>(args?: SelectSubset<T, PlantillaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plantillas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantillaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Plantillas
     * const plantilla = await prisma.plantilla.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlantillaUpdateManyArgs>(args: SelectSubset<T, PlantillaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Plantilla.
     * @param {PlantillaUpsertArgs} args - Arguments to update or create a Plantilla.
     * @example
     * // Update or create a Plantilla
     * const plantilla = await prisma.plantilla.upsert({
     *   create: {
     *     // ... data to create a Plantilla
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Plantilla we want to update
     *   }
     * })
     */
    upsert<T extends PlantillaUpsertArgs>(args: SelectSubset<T, PlantillaUpsertArgs<ExtArgs>>): Prisma__PlantillaClient<$Result.GetResult<Prisma.$PlantillaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Plantillas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantillaCountArgs} args - Arguments to filter Plantillas to count.
     * @example
     * // Count the number of Plantillas
     * const count = await prisma.plantilla.count({
     *   where: {
     *     // ... the filter for the Plantillas we want to count
     *   }
     * })
    **/
    count<T extends PlantillaCountArgs>(
      args?: Subset<T, PlantillaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlantillaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Plantilla.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantillaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlantillaAggregateArgs>(args: Subset<T, PlantillaAggregateArgs>): Prisma.PrismaPromise<GetPlantillaAggregateType<T>>

    /**
     * Group by Plantilla.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantillaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlantillaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlantillaGroupByArgs['orderBy'] }
        : { orderBy?: PlantillaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlantillaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlantillaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Plantilla model
   */
  readonly fields: PlantillaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Plantilla.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlantillaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Plantilla model
   */ 
  interface PlantillaFieldRefs {
    readonly id: FieldRef<"Plantilla", 'Int'>
    readonly nombre: FieldRef<"Plantilla", 'String'>
    readonly tipo: FieldRef<"Plantilla", 'TipoNotificacion'>
    readonly canal: FieldRef<"Plantilla", 'CanalNotificacion'>
    readonly asunto: FieldRef<"Plantilla", 'String'>
    readonly contenido: FieldRef<"Plantilla", 'String'>
    readonly variables: FieldRef<"Plantilla", 'String[]'>
    readonly activa: FieldRef<"Plantilla", 'Boolean'>
    readonly fechaCreacion: FieldRef<"Plantilla", 'DateTime'>
    readonly fechaActualizacion: FieldRef<"Plantilla", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Plantilla findUnique
   */
  export type PlantillaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plantilla
     */
    select?: PlantillaSelect<ExtArgs> | null
    /**
     * Filter, which Plantilla to fetch.
     */
    where: PlantillaWhereUniqueInput
  }

  /**
   * Plantilla findUniqueOrThrow
   */
  export type PlantillaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plantilla
     */
    select?: PlantillaSelect<ExtArgs> | null
    /**
     * Filter, which Plantilla to fetch.
     */
    where: PlantillaWhereUniqueInput
  }

  /**
   * Plantilla findFirst
   */
  export type PlantillaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plantilla
     */
    select?: PlantillaSelect<ExtArgs> | null
    /**
     * Filter, which Plantilla to fetch.
     */
    where?: PlantillaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plantillas to fetch.
     */
    orderBy?: PlantillaOrderByWithRelationInput | PlantillaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plantillas.
     */
    cursor?: PlantillaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plantillas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plantillas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plantillas.
     */
    distinct?: PlantillaScalarFieldEnum | PlantillaScalarFieldEnum[]
  }

  /**
   * Plantilla findFirstOrThrow
   */
  export type PlantillaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plantilla
     */
    select?: PlantillaSelect<ExtArgs> | null
    /**
     * Filter, which Plantilla to fetch.
     */
    where?: PlantillaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plantillas to fetch.
     */
    orderBy?: PlantillaOrderByWithRelationInput | PlantillaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plantillas.
     */
    cursor?: PlantillaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plantillas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plantillas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plantillas.
     */
    distinct?: PlantillaScalarFieldEnum | PlantillaScalarFieldEnum[]
  }

  /**
   * Plantilla findMany
   */
  export type PlantillaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plantilla
     */
    select?: PlantillaSelect<ExtArgs> | null
    /**
     * Filter, which Plantillas to fetch.
     */
    where?: PlantillaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plantillas to fetch.
     */
    orderBy?: PlantillaOrderByWithRelationInput | PlantillaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Plantillas.
     */
    cursor?: PlantillaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plantillas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plantillas.
     */
    skip?: number
    distinct?: PlantillaScalarFieldEnum | PlantillaScalarFieldEnum[]
  }

  /**
   * Plantilla create
   */
  export type PlantillaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plantilla
     */
    select?: PlantillaSelect<ExtArgs> | null
    /**
     * The data needed to create a Plantilla.
     */
    data: XOR<PlantillaCreateInput, PlantillaUncheckedCreateInput>
  }

  /**
   * Plantilla createMany
   */
  export type PlantillaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Plantillas.
     */
    data: PlantillaCreateManyInput | PlantillaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Plantilla createManyAndReturn
   */
  export type PlantillaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plantilla
     */
    select?: PlantillaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Plantillas.
     */
    data: PlantillaCreateManyInput | PlantillaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Plantilla update
   */
  export type PlantillaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plantilla
     */
    select?: PlantillaSelect<ExtArgs> | null
    /**
     * The data needed to update a Plantilla.
     */
    data: XOR<PlantillaUpdateInput, PlantillaUncheckedUpdateInput>
    /**
     * Choose, which Plantilla to update.
     */
    where: PlantillaWhereUniqueInput
  }

  /**
   * Plantilla updateMany
   */
  export type PlantillaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Plantillas.
     */
    data: XOR<PlantillaUpdateManyMutationInput, PlantillaUncheckedUpdateManyInput>
    /**
     * Filter which Plantillas to update
     */
    where?: PlantillaWhereInput
  }

  /**
   * Plantilla upsert
   */
  export type PlantillaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plantilla
     */
    select?: PlantillaSelect<ExtArgs> | null
    /**
     * The filter to search for the Plantilla to update in case it exists.
     */
    where: PlantillaWhereUniqueInput
    /**
     * In case the Plantilla found by the `where` argument doesn't exist, create a new Plantilla with this data.
     */
    create: XOR<PlantillaCreateInput, PlantillaUncheckedCreateInput>
    /**
     * In case the Plantilla was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlantillaUpdateInput, PlantillaUncheckedUpdateInput>
  }

  /**
   * Plantilla delete
   */
  export type PlantillaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plantilla
     */
    select?: PlantillaSelect<ExtArgs> | null
    /**
     * Filter which Plantilla to delete.
     */
    where: PlantillaWhereUniqueInput
  }

  /**
   * Plantilla deleteMany
   */
  export type PlantillaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plantillas to delete
     */
    where?: PlantillaWhereInput
  }

  /**
   * Plantilla without action
   */
  export type PlantillaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plantilla
     */
    select?: PlantillaSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const NotificacionScalarFieldEnum: {
    id: 'id',
    tipo: 'tipo',
    canal: 'canal',
    destinatario: 'destinatario',
    asunto: 'asunto',
    contenido: 'contenido',
    estado: 'estado',
    intentos: 'intentos',
    fechaEnvio: 'fechaEnvio',
    fechaCreacion: 'fechaCreacion',
    fechaActualizacion: 'fechaActualizacion',
    pacienteId: 'pacienteId',
    medicoId: 'medicoId',
    turnoId: 'turnoId',
    eventoId: 'eventoId',
    respuesta: 'respuesta',
    error: 'error'
  };

  export type NotificacionScalarFieldEnum = (typeof NotificacionScalarFieldEnum)[keyof typeof NotificacionScalarFieldEnum]


  export const PlantillaScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    tipo: 'tipo',
    canal: 'canal',
    asunto: 'asunto',
    contenido: 'contenido',
    variables: 'variables',
    activa: 'activa',
    fechaCreacion: 'fechaCreacion',
    fechaActualizacion: 'fechaActualizacion'
  };

  export type PlantillaScalarFieldEnum = (typeof PlantillaScalarFieldEnum)[keyof typeof PlantillaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'TipoNotificacion'
   */
  export type EnumTipoNotificacionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoNotificacion'>
    


  /**
   * Reference to a field of type 'TipoNotificacion[]'
   */
  export type ListEnumTipoNotificacionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoNotificacion[]'>
    


  /**
   * Reference to a field of type 'CanalNotificacion'
   */
  export type EnumCanalNotificacionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CanalNotificacion'>
    


  /**
   * Reference to a field of type 'CanalNotificacion[]'
   */
  export type ListEnumCanalNotificacionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CanalNotificacion[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'EstadoNotificacion'
   */
  export type EnumEstadoNotificacionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoNotificacion'>
    


  /**
   * Reference to a field of type 'EstadoNotificacion[]'
   */
  export type ListEnumEstadoNotificacionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoNotificacion[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type NotificacionWhereInput = {
    AND?: NotificacionWhereInput | NotificacionWhereInput[]
    OR?: NotificacionWhereInput[]
    NOT?: NotificacionWhereInput | NotificacionWhereInput[]
    id?: IntFilter<"Notificacion"> | number
    tipo?: EnumTipoNotificacionFilter<"Notificacion"> | $Enums.TipoNotificacion
    canal?: EnumCanalNotificacionFilter<"Notificacion"> | $Enums.CanalNotificacion
    destinatario?: StringFilter<"Notificacion"> | string
    asunto?: StringNullableFilter<"Notificacion"> | string | null
    contenido?: StringFilter<"Notificacion"> | string
    estado?: EnumEstadoNotificacionFilter<"Notificacion"> | $Enums.EstadoNotificacion
    intentos?: IntFilter<"Notificacion"> | number
    fechaEnvio?: DateTimeNullableFilter<"Notificacion"> | Date | string | null
    fechaCreacion?: DateTimeFilter<"Notificacion"> | Date | string
    fechaActualizacion?: DateTimeFilter<"Notificacion"> | Date | string
    pacienteId?: IntNullableFilter<"Notificacion"> | number | null
    medicoId?: IntNullableFilter<"Notificacion"> | number | null
    turnoId?: IntNullableFilter<"Notificacion"> | number | null
    eventoId?: StringNullableFilter<"Notificacion"> | string | null
    respuesta?: StringNullableFilter<"Notificacion"> | string | null
    error?: StringNullableFilter<"Notificacion"> | string | null
  }

  export type NotificacionOrderByWithRelationInput = {
    id?: SortOrder
    tipo?: SortOrder
    canal?: SortOrder
    destinatario?: SortOrder
    asunto?: SortOrderInput | SortOrder
    contenido?: SortOrder
    estado?: SortOrder
    intentos?: SortOrder
    fechaEnvio?: SortOrderInput | SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
    pacienteId?: SortOrderInput | SortOrder
    medicoId?: SortOrderInput | SortOrder
    turnoId?: SortOrderInput | SortOrder
    eventoId?: SortOrderInput | SortOrder
    respuesta?: SortOrderInput | SortOrder
    error?: SortOrderInput | SortOrder
  }

  export type NotificacionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificacionWhereInput | NotificacionWhereInput[]
    OR?: NotificacionWhereInput[]
    NOT?: NotificacionWhereInput | NotificacionWhereInput[]
    tipo?: EnumTipoNotificacionFilter<"Notificacion"> | $Enums.TipoNotificacion
    canal?: EnumCanalNotificacionFilter<"Notificacion"> | $Enums.CanalNotificacion
    destinatario?: StringFilter<"Notificacion"> | string
    asunto?: StringNullableFilter<"Notificacion"> | string | null
    contenido?: StringFilter<"Notificacion"> | string
    estado?: EnumEstadoNotificacionFilter<"Notificacion"> | $Enums.EstadoNotificacion
    intentos?: IntFilter<"Notificacion"> | number
    fechaEnvio?: DateTimeNullableFilter<"Notificacion"> | Date | string | null
    fechaCreacion?: DateTimeFilter<"Notificacion"> | Date | string
    fechaActualizacion?: DateTimeFilter<"Notificacion"> | Date | string
    pacienteId?: IntNullableFilter<"Notificacion"> | number | null
    medicoId?: IntNullableFilter<"Notificacion"> | number | null
    turnoId?: IntNullableFilter<"Notificacion"> | number | null
    eventoId?: StringNullableFilter<"Notificacion"> | string | null
    respuesta?: StringNullableFilter<"Notificacion"> | string | null
    error?: StringNullableFilter<"Notificacion"> | string | null
  }, "id">

  export type NotificacionOrderByWithAggregationInput = {
    id?: SortOrder
    tipo?: SortOrder
    canal?: SortOrder
    destinatario?: SortOrder
    asunto?: SortOrderInput | SortOrder
    contenido?: SortOrder
    estado?: SortOrder
    intentos?: SortOrder
    fechaEnvio?: SortOrderInput | SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
    pacienteId?: SortOrderInput | SortOrder
    medicoId?: SortOrderInput | SortOrder
    turnoId?: SortOrderInput | SortOrder
    eventoId?: SortOrderInput | SortOrder
    respuesta?: SortOrderInput | SortOrder
    error?: SortOrderInput | SortOrder
    _count?: NotificacionCountOrderByAggregateInput
    _avg?: NotificacionAvgOrderByAggregateInput
    _max?: NotificacionMaxOrderByAggregateInput
    _min?: NotificacionMinOrderByAggregateInput
    _sum?: NotificacionSumOrderByAggregateInput
  }

  export type NotificacionScalarWhereWithAggregatesInput = {
    AND?: NotificacionScalarWhereWithAggregatesInput | NotificacionScalarWhereWithAggregatesInput[]
    OR?: NotificacionScalarWhereWithAggregatesInput[]
    NOT?: NotificacionScalarWhereWithAggregatesInput | NotificacionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notificacion"> | number
    tipo?: EnumTipoNotificacionWithAggregatesFilter<"Notificacion"> | $Enums.TipoNotificacion
    canal?: EnumCanalNotificacionWithAggregatesFilter<"Notificacion"> | $Enums.CanalNotificacion
    destinatario?: StringWithAggregatesFilter<"Notificacion"> | string
    asunto?: StringNullableWithAggregatesFilter<"Notificacion"> | string | null
    contenido?: StringWithAggregatesFilter<"Notificacion"> | string
    estado?: EnumEstadoNotificacionWithAggregatesFilter<"Notificacion"> | $Enums.EstadoNotificacion
    intentos?: IntWithAggregatesFilter<"Notificacion"> | number
    fechaEnvio?: DateTimeNullableWithAggregatesFilter<"Notificacion"> | Date | string | null
    fechaCreacion?: DateTimeWithAggregatesFilter<"Notificacion"> | Date | string
    fechaActualizacion?: DateTimeWithAggregatesFilter<"Notificacion"> | Date | string
    pacienteId?: IntNullableWithAggregatesFilter<"Notificacion"> | number | null
    medicoId?: IntNullableWithAggregatesFilter<"Notificacion"> | number | null
    turnoId?: IntNullableWithAggregatesFilter<"Notificacion"> | number | null
    eventoId?: StringNullableWithAggregatesFilter<"Notificacion"> | string | null
    respuesta?: StringNullableWithAggregatesFilter<"Notificacion"> | string | null
    error?: StringNullableWithAggregatesFilter<"Notificacion"> | string | null
  }

  export type PlantillaWhereInput = {
    AND?: PlantillaWhereInput | PlantillaWhereInput[]
    OR?: PlantillaWhereInput[]
    NOT?: PlantillaWhereInput | PlantillaWhereInput[]
    id?: IntFilter<"Plantilla"> | number
    nombre?: StringFilter<"Plantilla"> | string
    tipo?: EnumTipoNotificacionFilter<"Plantilla"> | $Enums.TipoNotificacion
    canal?: EnumCanalNotificacionFilter<"Plantilla"> | $Enums.CanalNotificacion
    asunto?: StringNullableFilter<"Plantilla"> | string | null
    contenido?: StringFilter<"Plantilla"> | string
    variables?: StringNullableListFilter<"Plantilla">
    activa?: BoolFilter<"Plantilla"> | boolean
    fechaCreacion?: DateTimeFilter<"Plantilla"> | Date | string
    fechaActualizacion?: DateTimeFilter<"Plantilla"> | Date | string
  }

  export type PlantillaOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    tipo?: SortOrder
    canal?: SortOrder
    asunto?: SortOrderInput | SortOrder
    contenido?: SortOrder
    variables?: SortOrder
    activa?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
  }

  export type PlantillaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nombre?: string
    AND?: PlantillaWhereInput | PlantillaWhereInput[]
    OR?: PlantillaWhereInput[]
    NOT?: PlantillaWhereInput | PlantillaWhereInput[]
    tipo?: EnumTipoNotificacionFilter<"Plantilla"> | $Enums.TipoNotificacion
    canal?: EnumCanalNotificacionFilter<"Plantilla"> | $Enums.CanalNotificacion
    asunto?: StringNullableFilter<"Plantilla"> | string | null
    contenido?: StringFilter<"Plantilla"> | string
    variables?: StringNullableListFilter<"Plantilla">
    activa?: BoolFilter<"Plantilla"> | boolean
    fechaCreacion?: DateTimeFilter<"Plantilla"> | Date | string
    fechaActualizacion?: DateTimeFilter<"Plantilla"> | Date | string
  }, "id" | "nombre">

  export type PlantillaOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    tipo?: SortOrder
    canal?: SortOrder
    asunto?: SortOrderInput | SortOrder
    contenido?: SortOrder
    variables?: SortOrder
    activa?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
    _count?: PlantillaCountOrderByAggregateInput
    _avg?: PlantillaAvgOrderByAggregateInput
    _max?: PlantillaMaxOrderByAggregateInput
    _min?: PlantillaMinOrderByAggregateInput
    _sum?: PlantillaSumOrderByAggregateInput
  }

  export type PlantillaScalarWhereWithAggregatesInput = {
    AND?: PlantillaScalarWhereWithAggregatesInput | PlantillaScalarWhereWithAggregatesInput[]
    OR?: PlantillaScalarWhereWithAggregatesInput[]
    NOT?: PlantillaScalarWhereWithAggregatesInput | PlantillaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Plantilla"> | number
    nombre?: StringWithAggregatesFilter<"Plantilla"> | string
    tipo?: EnumTipoNotificacionWithAggregatesFilter<"Plantilla"> | $Enums.TipoNotificacion
    canal?: EnumCanalNotificacionWithAggregatesFilter<"Plantilla"> | $Enums.CanalNotificacion
    asunto?: StringNullableWithAggregatesFilter<"Plantilla"> | string | null
    contenido?: StringWithAggregatesFilter<"Plantilla"> | string
    variables?: StringNullableListFilter<"Plantilla">
    activa?: BoolWithAggregatesFilter<"Plantilla"> | boolean
    fechaCreacion?: DateTimeWithAggregatesFilter<"Plantilla"> | Date | string
    fechaActualizacion?: DateTimeWithAggregatesFilter<"Plantilla"> | Date | string
  }

  export type NotificacionCreateInput = {
    tipo: $Enums.TipoNotificacion
    canal: $Enums.CanalNotificacion
    destinatario: string
    asunto?: string | null
    contenido: string
    estado?: $Enums.EstadoNotificacion
    intentos?: number
    fechaEnvio?: Date | string | null
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    pacienteId?: number | null
    medicoId?: number | null
    turnoId?: number | null
    eventoId?: string | null
    respuesta?: string | null
    error?: string | null
  }

  export type NotificacionUncheckedCreateInput = {
    id?: number
    tipo: $Enums.TipoNotificacion
    canal: $Enums.CanalNotificacion
    destinatario: string
    asunto?: string | null
    contenido: string
    estado?: $Enums.EstadoNotificacion
    intentos?: number
    fechaEnvio?: Date | string | null
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    pacienteId?: number | null
    medicoId?: number | null
    turnoId?: number | null
    eventoId?: string | null
    respuesta?: string | null
    error?: string | null
  }

  export type NotificacionUpdateInput = {
    tipo?: EnumTipoNotificacionFieldUpdateOperationsInput | $Enums.TipoNotificacion
    canal?: EnumCanalNotificacionFieldUpdateOperationsInput | $Enums.CanalNotificacion
    destinatario?: StringFieldUpdateOperationsInput | string
    asunto?: NullableStringFieldUpdateOperationsInput | string | null
    contenido?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoNotificacionFieldUpdateOperationsInput | $Enums.EstadoNotificacion
    intentos?: IntFieldUpdateOperationsInput | number
    fechaEnvio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    pacienteId?: NullableIntFieldUpdateOperationsInput | number | null
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    turnoId?: NullableIntFieldUpdateOperationsInput | number | null
    eventoId?: NullableStringFieldUpdateOperationsInput | string | null
    respuesta?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificacionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: EnumTipoNotificacionFieldUpdateOperationsInput | $Enums.TipoNotificacion
    canal?: EnumCanalNotificacionFieldUpdateOperationsInput | $Enums.CanalNotificacion
    destinatario?: StringFieldUpdateOperationsInput | string
    asunto?: NullableStringFieldUpdateOperationsInput | string | null
    contenido?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoNotificacionFieldUpdateOperationsInput | $Enums.EstadoNotificacion
    intentos?: IntFieldUpdateOperationsInput | number
    fechaEnvio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    pacienteId?: NullableIntFieldUpdateOperationsInput | number | null
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    turnoId?: NullableIntFieldUpdateOperationsInput | number | null
    eventoId?: NullableStringFieldUpdateOperationsInput | string | null
    respuesta?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificacionCreateManyInput = {
    id?: number
    tipo: $Enums.TipoNotificacion
    canal: $Enums.CanalNotificacion
    destinatario: string
    asunto?: string | null
    contenido: string
    estado?: $Enums.EstadoNotificacion
    intentos?: number
    fechaEnvio?: Date | string | null
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
    pacienteId?: number | null
    medicoId?: number | null
    turnoId?: number | null
    eventoId?: string | null
    respuesta?: string | null
    error?: string | null
  }

  export type NotificacionUpdateManyMutationInput = {
    tipo?: EnumTipoNotificacionFieldUpdateOperationsInput | $Enums.TipoNotificacion
    canal?: EnumCanalNotificacionFieldUpdateOperationsInput | $Enums.CanalNotificacion
    destinatario?: StringFieldUpdateOperationsInput | string
    asunto?: NullableStringFieldUpdateOperationsInput | string | null
    contenido?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoNotificacionFieldUpdateOperationsInput | $Enums.EstadoNotificacion
    intentos?: IntFieldUpdateOperationsInput | number
    fechaEnvio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    pacienteId?: NullableIntFieldUpdateOperationsInput | number | null
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    turnoId?: NullableIntFieldUpdateOperationsInput | number | null
    eventoId?: NullableStringFieldUpdateOperationsInput | string | null
    respuesta?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificacionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: EnumTipoNotificacionFieldUpdateOperationsInput | $Enums.TipoNotificacion
    canal?: EnumCanalNotificacionFieldUpdateOperationsInput | $Enums.CanalNotificacion
    destinatario?: StringFieldUpdateOperationsInput | string
    asunto?: NullableStringFieldUpdateOperationsInput | string | null
    contenido?: StringFieldUpdateOperationsInput | string
    estado?: EnumEstadoNotificacionFieldUpdateOperationsInput | $Enums.EstadoNotificacion
    intentos?: IntFieldUpdateOperationsInput | number
    fechaEnvio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
    pacienteId?: NullableIntFieldUpdateOperationsInput | number | null
    medicoId?: NullableIntFieldUpdateOperationsInput | number | null
    turnoId?: NullableIntFieldUpdateOperationsInput | number | null
    eventoId?: NullableStringFieldUpdateOperationsInput | string | null
    respuesta?: NullableStringFieldUpdateOperationsInput | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlantillaCreateInput = {
    nombre: string
    tipo: $Enums.TipoNotificacion
    canal: $Enums.CanalNotificacion
    asunto?: string | null
    contenido: string
    variables?: PlantillaCreatevariablesInput | string[]
    activa?: boolean
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
  }

  export type PlantillaUncheckedCreateInput = {
    id?: number
    nombre: string
    tipo: $Enums.TipoNotificacion
    canal: $Enums.CanalNotificacion
    asunto?: string | null
    contenido: string
    variables?: PlantillaCreatevariablesInput | string[]
    activa?: boolean
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
  }

  export type PlantillaUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoNotificacionFieldUpdateOperationsInput | $Enums.TipoNotificacion
    canal?: EnumCanalNotificacionFieldUpdateOperationsInput | $Enums.CanalNotificacion
    asunto?: NullableStringFieldUpdateOperationsInput | string | null
    contenido?: StringFieldUpdateOperationsInput | string
    variables?: PlantillaUpdatevariablesInput | string[]
    activa?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlantillaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoNotificacionFieldUpdateOperationsInput | $Enums.TipoNotificacion
    canal?: EnumCanalNotificacionFieldUpdateOperationsInput | $Enums.CanalNotificacion
    asunto?: NullableStringFieldUpdateOperationsInput | string | null
    contenido?: StringFieldUpdateOperationsInput | string
    variables?: PlantillaUpdatevariablesInput | string[]
    activa?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlantillaCreateManyInput = {
    id?: number
    nombre: string
    tipo: $Enums.TipoNotificacion
    canal: $Enums.CanalNotificacion
    asunto?: string | null
    contenido: string
    variables?: PlantillaCreatevariablesInput | string[]
    activa?: boolean
    fechaCreacion?: Date | string
    fechaActualizacion?: Date | string
  }

  export type PlantillaUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoNotificacionFieldUpdateOperationsInput | $Enums.TipoNotificacion
    canal?: EnumCanalNotificacionFieldUpdateOperationsInput | $Enums.CanalNotificacion
    asunto?: NullableStringFieldUpdateOperationsInput | string | null
    contenido?: StringFieldUpdateOperationsInput | string
    variables?: PlantillaUpdatevariablesInput | string[]
    activa?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlantillaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoNotificacionFieldUpdateOperationsInput | $Enums.TipoNotificacion
    canal?: EnumCanalNotificacionFieldUpdateOperationsInput | $Enums.CanalNotificacion
    asunto?: NullableStringFieldUpdateOperationsInput | string | null
    contenido?: StringFieldUpdateOperationsInput | string
    variables?: PlantillaUpdatevariablesInput | string[]
    activa?: BoolFieldUpdateOperationsInput | boolean
    fechaCreacion?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaActualizacion?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumTipoNotificacionFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoNotificacion | EnumTipoNotificacionFieldRefInput<$PrismaModel>
    in?: $Enums.TipoNotificacion[] | ListEnumTipoNotificacionFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoNotificacion[] | ListEnumTipoNotificacionFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoNotificacionFilter<$PrismaModel> | $Enums.TipoNotificacion
  }

  export type EnumCanalNotificacionFilter<$PrismaModel = never> = {
    equals?: $Enums.CanalNotificacion | EnumCanalNotificacionFieldRefInput<$PrismaModel>
    in?: $Enums.CanalNotificacion[] | ListEnumCanalNotificacionFieldRefInput<$PrismaModel>
    notIn?: $Enums.CanalNotificacion[] | ListEnumCanalNotificacionFieldRefInput<$PrismaModel>
    not?: NestedEnumCanalNotificacionFilter<$PrismaModel> | $Enums.CanalNotificacion
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumEstadoNotificacionFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoNotificacion | EnumEstadoNotificacionFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoNotificacion[] | ListEnumEstadoNotificacionFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoNotificacion[] | ListEnumEstadoNotificacionFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoNotificacionFilter<$PrismaModel> | $Enums.EstadoNotificacion
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type NotificacionCountOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    canal?: SortOrder
    destinatario?: SortOrder
    asunto?: SortOrder
    contenido?: SortOrder
    estado?: SortOrder
    intentos?: SortOrder
    fechaEnvio?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
    pacienteId?: SortOrder
    medicoId?: SortOrder
    turnoId?: SortOrder
    eventoId?: SortOrder
    respuesta?: SortOrder
    error?: SortOrder
  }

  export type NotificacionAvgOrderByAggregateInput = {
    id?: SortOrder
    intentos?: SortOrder
    pacienteId?: SortOrder
    medicoId?: SortOrder
    turnoId?: SortOrder
  }

  export type NotificacionMaxOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    canal?: SortOrder
    destinatario?: SortOrder
    asunto?: SortOrder
    contenido?: SortOrder
    estado?: SortOrder
    intentos?: SortOrder
    fechaEnvio?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
    pacienteId?: SortOrder
    medicoId?: SortOrder
    turnoId?: SortOrder
    eventoId?: SortOrder
    respuesta?: SortOrder
    error?: SortOrder
  }

  export type NotificacionMinOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    canal?: SortOrder
    destinatario?: SortOrder
    asunto?: SortOrder
    contenido?: SortOrder
    estado?: SortOrder
    intentos?: SortOrder
    fechaEnvio?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
    pacienteId?: SortOrder
    medicoId?: SortOrder
    turnoId?: SortOrder
    eventoId?: SortOrder
    respuesta?: SortOrder
    error?: SortOrder
  }

  export type NotificacionSumOrderByAggregateInput = {
    id?: SortOrder
    intentos?: SortOrder
    pacienteId?: SortOrder
    medicoId?: SortOrder
    turnoId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumTipoNotificacionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoNotificacion | EnumTipoNotificacionFieldRefInput<$PrismaModel>
    in?: $Enums.TipoNotificacion[] | ListEnumTipoNotificacionFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoNotificacion[] | ListEnumTipoNotificacionFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoNotificacionWithAggregatesFilter<$PrismaModel> | $Enums.TipoNotificacion
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoNotificacionFilter<$PrismaModel>
    _max?: NestedEnumTipoNotificacionFilter<$PrismaModel>
  }

  export type EnumCanalNotificacionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CanalNotificacion | EnumCanalNotificacionFieldRefInput<$PrismaModel>
    in?: $Enums.CanalNotificacion[] | ListEnumCanalNotificacionFieldRefInput<$PrismaModel>
    notIn?: $Enums.CanalNotificacion[] | ListEnumCanalNotificacionFieldRefInput<$PrismaModel>
    not?: NestedEnumCanalNotificacionWithAggregatesFilter<$PrismaModel> | $Enums.CanalNotificacion
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCanalNotificacionFilter<$PrismaModel>
    _max?: NestedEnumCanalNotificacionFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumEstadoNotificacionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoNotificacion | EnumEstadoNotificacionFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoNotificacion[] | ListEnumEstadoNotificacionFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoNotificacion[] | ListEnumEstadoNotificacionFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoNotificacionWithAggregatesFilter<$PrismaModel> | $Enums.EstadoNotificacion
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoNotificacionFilter<$PrismaModel>
    _max?: NestedEnumEstadoNotificacionFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type PlantillaCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    tipo?: SortOrder
    canal?: SortOrder
    asunto?: SortOrder
    contenido?: SortOrder
    variables?: SortOrder
    activa?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
  }

  export type PlantillaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PlantillaMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    tipo?: SortOrder
    canal?: SortOrder
    asunto?: SortOrder
    contenido?: SortOrder
    activa?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
  }

  export type PlantillaMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    tipo?: SortOrder
    canal?: SortOrder
    asunto?: SortOrder
    contenido?: SortOrder
    activa?: SortOrder
    fechaCreacion?: SortOrder
    fechaActualizacion?: SortOrder
  }

  export type PlantillaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumTipoNotificacionFieldUpdateOperationsInput = {
    set?: $Enums.TipoNotificacion
  }

  export type EnumCanalNotificacionFieldUpdateOperationsInput = {
    set?: $Enums.CanalNotificacion
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumEstadoNotificacionFieldUpdateOperationsInput = {
    set?: $Enums.EstadoNotificacion
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PlantillaCreatevariablesInput = {
    set: string[]
  }

  export type PlantillaUpdatevariablesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumTipoNotificacionFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoNotificacion | EnumTipoNotificacionFieldRefInput<$PrismaModel>
    in?: $Enums.TipoNotificacion[] | ListEnumTipoNotificacionFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoNotificacion[] | ListEnumTipoNotificacionFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoNotificacionFilter<$PrismaModel> | $Enums.TipoNotificacion
  }

  export type NestedEnumCanalNotificacionFilter<$PrismaModel = never> = {
    equals?: $Enums.CanalNotificacion | EnumCanalNotificacionFieldRefInput<$PrismaModel>
    in?: $Enums.CanalNotificacion[] | ListEnumCanalNotificacionFieldRefInput<$PrismaModel>
    notIn?: $Enums.CanalNotificacion[] | ListEnumCanalNotificacionFieldRefInput<$PrismaModel>
    not?: NestedEnumCanalNotificacionFilter<$PrismaModel> | $Enums.CanalNotificacion
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumEstadoNotificacionFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoNotificacion | EnumEstadoNotificacionFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoNotificacion[] | ListEnumEstadoNotificacionFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoNotificacion[] | ListEnumEstadoNotificacionFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoNotificacionFilter<$PrismaModel> | $Enums.EstadoNotificacion
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumTipoNotificacionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoNotificacion | EnumTipoNotificacionFieldRefInput<$PrismaModel>
    in?: $Enums.TipoNotificacion[] | ListEnumTipoNotificacionFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoNotificacion[] | ListEnumTipoNotificacionFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoNotificacionWithAggregatesFilter<$PrismaModel> | $Enums.TipoNotificacion
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoNotificacionFilter<$PrismaModel>
    _max?: NestedEnumTipoNotificacionFilter<$PrismaModel>
  }

  export type NestedEnumCanalNotificacionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CanalNotificacion | EnumCanalNotificacionFieldRefInput<$PrismaModel>
    in?: $Enums.CanalNotificacion[] | ListEnumCanalNotificacionFieldRefInput<$PrismaModel>
    notIn?: $Enums.CanalNotificacion[] | ListEnumCanalNotificacionFieldRefInput<$PrismaModel>
    not?: NestedEnumCanalNotificacionWithAggregatesFilter<$PrismaModel> | $Enums.CanalNotificacion
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCanalNotificacionFilter<$PrismaModel>
    _max?: NestedEnumCanalNotificacionFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumEstadoNotificacionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoNotificacion | EnumEstadoNotificacionFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoNotificacion[] | ListEnumEstadoNotificacionFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoNotificacion[] | ListEnumEstadoNotificacionFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoNotificacionWithAggregatesFilter<$PrismaModel> | $Enums.EstadoNotificacion
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoNotificacionFilter<$PrismaModel>
    _max?: NestedEnumEstadoNotificacionFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use NotificacionDefaultArgs instead
     */
    export type NotificacionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificacionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlantillaDefaultArgs instead
     */
    export type PlantillaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlantillaDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}