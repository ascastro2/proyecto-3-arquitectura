
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Turno
 * 
 */
export type Turno = $Result.DefaultSelection<Prisma.$TurnoPayload>
/**
 * Model HistorialCambio
 * 
 */
export type HistorialCambio = $Result.DefaultSelection<Prisma.$HistorialCambioPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const EstadoTurno: {
  PENDIENTE: 'PENDIENTE',
  CONFIRMADO: 'CONFIRMADO',
  CANCELADO: 'CANCELADO',
  COMPLETADO: 'COMPLETADO',
  NO_SHOW: 'NO_SHOW'
};

export type EstadoTurno = (typeof EstadoTurno)[keyof typeof EstadoTurno]


export const TipoCambio: {
  CREACION: 'CREACION',
  MODIFICACION: 'MODIFICACION',
  CANCELACION: 'CANCELACION',
  REAGENDAMIENTO: 'REAGENDAMIENTO',
  CONFIRMACION: 'CONFIRMACION'
};

export type TipoCambio = (typeof TipoCambio)[keyof typeof TipoCambio]

}

export type EstadoTurno = $Enums.EstadoTurno

export const EstadoTurno: typeof $Enums.EstadoTurno

export type TipoCambio = $Enums.TipoCambio

export const TipoCambio: typeof $Enums.TipoCambio

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Turnos
 * const turnos = await prisma.turno.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Turnos
   * const turnos = await prisma.turno.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.turno`: Exposes CRUD operations for the **Turno** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Turnos
    * const turnos = await prisma.turno.findMany()
    * ```
    */
  get turno(): Prisma.TurnoDelegate<ExtArgs>;

  /**
   * `prisma.historialCambio`: Exposes CRUD operations for the **HistorialCambio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HistorialCambios
    * const historialCambios = await prisma.historialCambio.findMany()
    * ```
    */
  get historialCambio(): Prisma.HistorialCambioDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Turno: 'Turno',
    HistorialCambio: 'HistorialCambio'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "turno" | "historialCambio"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Turno: {
        payload: Prisma.$TurnoPayload<ExtArgs>
        fields: Prisma.TurnoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TurnoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurnoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TurnoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurnoPayload>
          }
          findFirst: {
            args: Prisma.TurnoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurnoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TurnoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurnoPayload>
          }
          findMany: {
            args: Prisma.TurnoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurnoPayload>[]
          }
          create: {
            args: Prisma.TurnoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurnoPayload>
          }
          createMany: {
            args: Prisma.TurnoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TurnoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurnoPayload>[]
          }
          delete: {
            args: Prisma.TurnoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurnoPayload>
          }
          update: {
            args: Prisma.TurnoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurnoPayload>
          }
          deleteMany: {
            args: Prisma.TurnoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TurnoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TurnoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TurnoPayload>
          }
          aggregate: {
            args: Prisma.TurnoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTurno>
          }
          groupBy: {
            args: Prisma.TurnoGroupByArgs<ExtArgs>
            result: $Utils.Optional<TurnoGroupByOutputType>[]
          }
          count: {
            args: Prisma.TurnoCountArgs<ExtArgs>
            result: $Utils.Optional<TurnoCountAggregateOutputType> | number
          }
        }
      }
      HistorialCambio: {
        payload: Prisma.$HistorialCambioPayload<ExtArgs>
        fields: Prisma.HistorialCambioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HistorialCambioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCambioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HistorialCambioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCambioPayload>
          }
          findFirst: {
            args: Prisma.HistorialCambioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCambioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HistorialCambioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCambioPayload>
          }
          findMany: {
            args: Prisma.HistorialCambioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCambioPayload>[]
          }
          create: {
            args: Prisma.HistorialCambioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCambioPayload>
          }
          createMany: {
            args: Prisma.HistorialCambioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HistorialCambioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCambioPayload>[]
          }
          delete: {
            args: Prisma.HistorialCambioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCambioPayload>
          }
          update: {
            args: Prisma.HistorialCambioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCambioPayload>
          }
          deleteMany: {
            args: Prisma.HistorialCambioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HistorialCambioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HistorialCambioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistorialCambioPayload>
          }
          aggregate: {
            args: Prisma.HistorialCambioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHistorialCambio>
          }
          groupBy: {
            args: Prisma.HistorialCambioGroupByArgs<ExtArgs>
            result: $Utils.Optional<HistorialCambioGroupByOutputType>[]
          }
          count: {
            args: Prisma.HistorialCambioCountArgs<ExtArgs>
            result: $Utils.Optional<HistorialCambioCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TurnoCountOutputType
   */

  export type TurnoCountOutputType = {
    historialCambios: number
  }

  export type TurnoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    historialCambios?: boolean | TurnoCountOutputTypeCountHistorialCambiosArgs
  }

  // Custom InputTypes
  /**
   * TurnoCountOutputType without action
   */
  export type TurnoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TurnoCountOutputType
     */
    select?: TurnoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TurnoCountOutputType without action
   */
  export type TurnoCountOutputTypeCountHistorialCambiosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistorialCambioWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Turno
   */

  export type AggregateTurno = {
    _count: TurnoCountAggregateOutputType | null
    _avg: TurnoAvgAggregateOutputType | null
    _sum: TurnoSumAggregateOutputType | null
    _min: TurnoMinAggregateOutputType | null
    _max: TurnoMaxAggregateOutputType | null
  }

  export type TurnoAvgAggregateOutputType = {
    id: number | null
    pacienteId: number | null
    medicoId: number | null
    diaSemana: number | null
  }

  export type TurnoSumAggregateOutputType = {
    id: number | null
    pacienteId: number | null
    medicoId: number | null
    diaSemana: number | null
  }

  export type TurnoMinAggregateOutputType = {
    id: number | null
    pacienteId: number | null
    medicoId: number | null
    fecha: Date | null
    hora: string | null
    diaSemana: number | null
    estado: $Enums.EstadoTurno | null
    motivo: string | null
    observaciones: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TurnoMaxAggregateOutputType = {
    id: number | null
    pacienteId: number | null
    medicoId: number | null
    fecha: Date | null
    hora: string | null
    diaSemana: number | null
    estado: $Enums.EstadoTurno | null
    motivo: string | null
    observaciones: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TurnoCountAggregateOutputType = {
    id: number
    pacienteId: number
    medicoId: number
    fecha: number
    hora: number
    diaSemana: number
    estado: number
    motivo: number
    observaciones: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TurnoAvgAggregateInputType = {
    id?: true
    pacienteId?: true
    medicoId?: true
    diaSemana?: true
  }

  export type TurnoSumAggregateInputType = {
    id?: true
    pacienteId?: true
    medicoId?: true
    diaSemana?: true
  }

  export type TurnoMinAggregateInputType = {
    id?: true
    pacienteId?: true
    medicoId?: true
    fecha?: true
    hora?: true
    diaSemana?: true
    estado?: true
    motivo?: true
    observaciones?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TurnoMaxAggregateInputType = {
    id?: true
    pacienteId?: true
    medicoId?: true
    fecha?: true
    hora?: true
    diaSemana?: true
    estado?: true
    motivo?: true
    observaciones?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TurnoCountAggregateInputType = {
    id?: true
    pacienteId?: true
    medicoId?: true
    fecha?: true
    hora?: true
    diaSemana?: true
    estado?: true
    motivo?: true
    observaciones?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TurnoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Turno to aggregate.
     */
    where?: TurnoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turnos to fetch.
     */
    orderBy?: TurnoOrderByWithRelationInput | TurnoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TurnoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turnos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turnos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Turnos
    **/
    _count?: true | TurnoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TurnoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TurnoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TurnoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TurnoMaxAggregateInputType
  }

  export type GetTurnoAggregateType<T extends TurnoAggregateArgs> = {
        [P in keyof T & keyof AggregateTurno]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTurno[P]>
      : GetScalarType<T[P], AggregateTurno[P]>
  }




  export type TurnoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TurnoWhereInput
    orderBy?: TurnoOrderByWithAggregationInput | TurnoOrderByWithAggregationInput[]
    by: TurnoScalarFieldEnum[] | TurnoScalarFieldEnum
    having?: TurnoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TurnoCountAggregateInputType | true
    _avg?: TurnoAvgAggregateInputType
    _sum?: TurnoSumAggregateInputType
    _min?: TurnoMinAggregateInputType
    _max?: TurnoMaxAggregateInputType
  }

  export type TurnoGroupByOutputType = {
    id: number
    pacienteId: number
    medicoId: number
    fecha: Date
    hora: string
    diaSemana: number
    estado: $Enums.EstadoTurno
    motivo: string | null
    observaciones: string | null
    createdAt: Date
    updatedAt: Date
    _count: TurnoCountAggregateOutputType | null
    _avg: TurnoAvgAggregateOutputType | null
    _sum: TurnoSumAggregateOutputType | null
    _min: TurnoMinAggregateOutputType | null
    _max: TurnoMaxAggregateOutputType | null
  }

  type GetTurnoGroupByPayload<T extends TurnoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TurnoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TurnoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TurnoGroupByOutputType[P]>
            : GetScalarType<T[P], TurnoGroupByOutputType[P]>
        }
      >
    >


  export type TurnoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pacienteId?: boolean
    medicoId?: boolean
    fecha?: boolean
    hora?: boolean
    diaSemana?: boolean
    estado?: boolean
    motivo?: boolean
    observaciones?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    historialCambios?: boolean | Turno$historialCambiosArgs<ExtArgs>
    _count?: boolean | TurnoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["turno"]>

  export type TurnoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pacienteId?: boolean
    medicoId?: boolean
    fecha?: boolean
    hora?: boolean
    diaSemana?: boolean
    estado?: boolean
    motivo?: boolean
    observaciones?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["turno"]>

  export type TurnoSelectScalar = {
    id?: boolean
    pacienteId?: boolean
    medicoId?: boolean
    fecha?: boolean
    hora?: boolean
    diaSemana?: boolean
    estado?: boolean
    motivo?: boolean
    observaciones?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TurnoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    historialCambios?: boolean | Turno$historialCambiosArgs<ExtArgs>
    _count?: boolean | TurnoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TurnoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TurnoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Turno"
    objects: {
      historialCambios: Prisma.$HistorialCambioPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      pacienteId: number
      medicoId: number
      fecha: Date
      hora: string
      diaSemana: number
      estado: $Enums.EstadoTurno
      motivo: string | null
      observaciones: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["turno"]>
    composites: {}
  }

  type TurnoGetPayload<S extends boolean | null | undefined | TurnoDefaultArgs> = $Result.GetResult<Prisma.$TurnoPayload, S>

  type TurnoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TurnoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TurnoCountAggregateInputType | true
    }

  export interface TurnoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Turno'], meta: { name: 'Turno' } }
    /**
     * Find zero or one Turno that matches the filter.
     * @param {TurnoFindUniqueArgs} args - Arguments to find a Turno
     * @example
     * // Get one Turno
     * const turno = await prisma.turno.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TurnoFindUniqueArgs>(args: SelectSubset<T, TurnoFindUniqueArgs<ExtArgs>>): Prisma__TurnoClient<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Turno that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TurnoFindUniqueOrThrowArgs} args - Arguments to find a Turno
     * @example
     * // Get one Turno
     * const turno = await prisma.turno.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TurnoFindUniqueOrThrowArgs>(args: SelectSubset<T, TurnoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TurnoClient<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Turno that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurnoFindFirstArgs} args - Arguments to find a Turno
     * @example
     * // Get one Turno
     * const turno = await prisma.turno.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TurnoFindFirstArgs>(args?: SelectSubset<T, TurnoFindFirstArgs<ExtArgs>>): Prisma__TurnoClient<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Turno that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurnoFindFirstOrThrowArgs} args - Arguments to find a Turno
     * @example
     * // Get one Turno
     * const turno = await prisma.turno.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TurnoFindFirstOrThrowArgs>(args?: SelectSubset<T, TurnoFindFirstOrThrowArgs<ExtArgs>>): Prisma__TurnoClient<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Turnos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurnoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Turnos
     * const turnos = await prisma.turno.findMany()
     * 
     * // Get first 10 Turnos
     * const turnos = await prisma.turno.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const turnoWithIdOnly = await prisma.turno.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TurnoFindManyArgs>(args?: SelectSubset<T, TurnoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Turno.
     * @param {TurnoCreateArgs} args - Arguments to create a Turno.
     * @example
     * // Create one Turno
     * const Turno = await prisma.turno.create({
     *   data: {
     *     // ... data to create a Turno
     *   }
     * })
     * 
     */
    create<T extends TurnoCreateArgs>(args: SelectSubset<T, TurnoCreateArgs<ExtArgs>>): Prisma__TurnoClient<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Turnos.
     * @param {TurnoCreateManyArgs} args - Arguments to create many Turnos.
     * @example
     * // Create many Turnos
     * const turno = await prisma.turno.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TurnoCreateManyArgs>(args?: SelectSubset<T, TurnoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Turnos and returns the data saved in the database.
     * @param {TurnoCreateManyAndReturnArgs} args - Arguments to create many Turnos.
     * @example
     * // Create many Turnos
     * const turno = await prisma.turno.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Turnos and only return the `id`
     * const turnoWithIdOnly = await prisma.turno.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TurnoCreateManyAndReturnArgs>(args?: SelectSubset<T, TurnoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Turno.
     * @param {TurnoDeleteArgs} args - Arguments to delete one Turno.
     * @example
     * // Delete one Turno
     * const Turno = await prisma.turno.delete({
     *   where: {
     *     // ... filter to delete one Turno
     *   }
     * })
     * 
     */
    delete<T extends TurnoDeleteArgs>(args: SelectSubset<T, TurnoDeleteArgs<ExtArgs>>): Prisma__TurnoClient<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Turno.
     * @param {TurnoUpdateArgs} args - Arguments to update one Turno.
     * @example
     * // Update one Turno
     * const turno = await prisma.turno.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TurnoUpdateArgs>(args: SelectSubset<T, TurnoUpdateArgs<ExtArgs>>): Prisma__TurnoClient<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Turnos.
     * @param {TurnoDeleteManyArgs} args - Arguments to filter Turnos to delete.
     * @example
     * // Delete a few Turnos
     * const { count } = await prisma.turno.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TurnoDeleteManyArgs>(args?: SelectSubset<T, TurnoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Turnos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurnoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Turnos
     * const turno = await prisma.turno.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TurnoUpdateManyArgs>(args: SelectSubset<T, TurnoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Turno.
     * @param {TurnoUpsertArgs} args - Arguments to update or create a Turno.
     * @example
     * // Update or create a Turno
     * const turno = await prisma.turno.upsert({
     *   create: {
     *     // ... data to create a Turno
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Turno we want to update
     *   }
     * })
     */
    upsert<T extends TurnoUpsertArgs>(args: SelectSubset<T, TurnoUpsertArgs<ExtArgs>>): Prisma__TurnoClient<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Turnos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurnoCountArgs} args - Arguments to filter Turnos to count.
     * @example
     * // Count the number of Turnos
     * const count = await prisma.turno.count({
     *   where: {
     *     // ... the filter for the Turnos we want to count
     *   }
     * })
    **/
    count<T extends TurnoCountArgs>(
      args?: Subset<T, TurnoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TurnoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Turno.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurnoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TurnoAggregateArgs>(args: Subset<T, TurnoAggregateArgs>): Prisma.PrismaPromise<GetTurnoAggregateType<T>>

    /**
     * Group by Turno.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TurnoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TurnoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TurnoGroupByArgs['orderBy'] }
        : { orderBy?: TurnoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TurnoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTurnoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Turno model
   */
  readonly fields: TurnoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Turno.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TurnoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    historialCambios<T extends Turno$historialCambiosArgs<ExtArgs> = {}>(args?: Subset<T, Turno$historialCambiosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistorialCambioPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Turno model
   */ 
  interface TurnoFieldRefs {
    readonly id: FieldRef<"Turno", 'Int'>
    readonly pacienteId: FieldRef<"Turno", 'Int'>
    readonly medicoId: FieldRef<"Turno", 'Int'>
    readonly fecha: FieldRef<"Turno", 'DateTime'>
    readonly hora: FieldRef<"Turno", 'String'>
    readonly diaSemana: FieldRef<"Turno", 'Int'>
    readonly estado: FieldRef<"Turno", 'EstadoTurno'>
    readonly motivo: FieldRef<"Turno", 'String'>
    readonly observaciones: FieldRef<"Turno", 'String'>
    readonly createdAt: FieldRef<"Turno", 'DateTime'>
    readonly updatedAt: FieldRef<"Turno", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Turno findUnique
   */
  export type TurnoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    /**
     * Filter, which Turno to fetch.
     */
    where: TurnoWhereUniqueInput
  }

  /**
   * Turno findUniqueOrThrow
   */
  export type TurnoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    /**
     * Filter, which Turno to fetch.
     */
    where: TurnoWhereUniqueInput
  }

  /**
   * Turno findFirst
   */
  export type TurnoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    /**
     * Filter, which Turno to fetch.
     */
    where?: TurnoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turnos to fetch.
     */
    orderBy?: TurnoOrderByWithRelationInput | TurnoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Turnos.
     */
    cursor?: TurnoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turnos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turnos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Turnos.
     */
    distinct?: TurnoScalarFieldEnum | TurnoScalarFieldEnum[]
  }

  /**
   * Turno findFirstOrThrow
   */
  export type TurnoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    /**
     * Filter, which Turno to fetch.
     */
    where?: TurnoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turnos to fetch.
     */
    orderBy?: TurnoOrderByWithRelationInput | TurnoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Turnos.
     */
    cursor?: TurnoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turnos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turnos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Turnos.
     */
    distinct?: TurnoScalarFieldEnum | TurnoScalarFieldEnum[]
  }

  /**
   * Turno findMany
   */
  export type TurnoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    /**
     * Filter, which Turnos to fetch.
     */
    where?: TurnoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Turnos to fetch.
     */
    orderBy?: TurnoOrderByWithRelationInput | TurnoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Turnos.
     */
    cursor?: TurnoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Turnos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Turnos.
     */
    skip?: number
    distinct?: TurnoScalarFieldEnum | TurnoScalarFieldEnum[]
  }

  /**
   * Turno create
   */
  export type TurnoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    /**
     * The data needed to create a Turno.
     */
    data: XOR<TurnoCreateInput, TurnoUncheckedCreateInput>
  }

  /**
   * Turno createMany
   */
  export type TurnoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Turnos.
     */
    data: TurnoCreateManyInput | TurnoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Turno createManyAndReturn
   */
  export type TurnoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Turnos.
     */
    data: TurnoCreateManyInput | TurnoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Turno update
   */
  export type TurnoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    /**
     * The data needed to update a Turno.
     */
    data: XOR<TurnoUpdateInput, TurnoUncheckedUpdateInput>
    /**
     * Choose, which Turno to update.
     */
    where: TurnoWhereUniqueInput
  }

  /**
   * Turno updateMany
   */
  export type TurnoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Turnos.
     */
    data: XOR<TurnoUpdateManyMutationInput, TurnoUncheckedUpdateManyInput>
    /**
     * Filter which Turnos to update
     */
    where?: TurnoWhereInput
  }

  /**
   * Turno upsert
   */
  export type TurnoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    /**
     * The filter to search for the Turno to update in case it exists.
     */
    where: TurnoWhereUniqueInput
    /**
     * In case the Turno found by the `where` argument doesn't exist, create a new Turno with this data.
     */
    create: XOR<TurnoCreateInput, TurnoUncheckedCreateInput>
    /**
     * In case the Turno was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TurnoUpdateInput, TurnoUncheckedUpdateInput>
  }

  /**
   * Turno delete
   */
  export type TurnoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
    /**
     * Filter which Turno to delete.
     */
    where: TurnoWhereUniqueInput
  }

  /**
   * Turno deleteMany
   */
  export type TurnoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Turnos to delete
     */
    where?: TurnoWhereInput
  }

  /**
   * Turno.historialCambios
   */
  export type Turno$historialCambiosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCambio
     */
    select?: HistorialCambioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCambioInclude<ExtArgs> | null
    where?: HistorialCambioWhereInput
    orderBy?: HistorialCambioOrderByWithRelationInput | HistorialCambioOrderByWithRelationInput[]
    cursor?: HistorialCambioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistorialCambioScalarFieldEnum | HistorialCambioScalarFieldEnum[]
  }

  /**
   * Turno without action
   */
  export type TurnoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Turno
     */
    select?: TurnoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TurnoInclude<ExtArgs> | null
  }


  /**
   * Model HistorialCambio
   */

  export type AggregateHistorialCambio = {
    _count: HistorialCambioCountAggregateOutputType | null
    _avg: HistorialCambioAvgAggregateOutputType | null
    _sum: HistorialCambioSumAggregateOutputType | null
    _min: HistorialCambioMinAggregateOutputType | null
    _max: HistorialCambioMaxAggregateOutputType | null
  }

  export type HistorialCambioAvgAggregateOutputType = {
    id: number | null
    turnoId: number | null
    usuarioId: number | null
  }

  export type HistorialCambioSumAggregateOutputType = {
    id: number | null
    turnoId: number | null
    usuarioId: number | null
  }

  export type HistorialCambioMinAggregateOutputType = {
    id: number | null
    turnoId: number | null
    tipoCambio: $Enums.TipoCambio | null
    descripcion: string | null
    fechaCambio: Date | null
    usuarioId: number | null
  }

  export type HistorialCambioMaxAggregateOutputType = {
    id: number | null
    turnoId: number | null
    tipoCambio: $Enums.TipoCambio | null
    descripcion: string | null
    fechaCambio: Date | null
    usuarioId: number | null
  }

  export type HistorialCambioCountAggregateOutputType = {
    id: number
    turnoId: number
    tipoCambio: number
    descripcion: number
    fechaCambio: number
    usuarioId: number
    datosAnteriores: number
    datosNuevos: number
    _all: number
  }


  export type HistorialCambioAvgAggregateInputType = {
    id?: true
    turnoId?: true
    usuarioId?: true
  }

  export type HistorialCambioSumAggregateInputType = {
    id?: true
    turnoId?: true
    usuarioId?: true
  }

  export type HistorialCambioMinAggregateInputType = {
    id?: true
    turnoId?: true
    tipoCambio?: true
    descripcion?: true
    fechaCambio?: true
    usuarioId?: true
  }

  export type HistorialCambioMaxAggregateInputType = {
    id?: true
    turnoId?: true
    tipoCambio?: true
    descripcion?: true
    fechaCambio?: true
    usuarioId?: true
  }

  export type HistorialCambioCountAggregateInputType = {
    id?: true
    turnoId?: true
    tipoCambio?: true
    descripcion?: true
    fechaCambio?: true
    usuarioId?: true
    datosAnteriores?: true
    datosNuevos?: true
    _all?: true
  }

  export type HistorialCambioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HistorialCambio to aggregate.
     */
    where?: HistorialCambioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistorialCambios to fetch.
     */
    orderBy?: HistorialCambioOrderByWithRelationInput | HistorialCambioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HistorialCambioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistorialCambios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistorialCambios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HistorialCambios
    **/
    _count?: true | HistorialCambioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HistorialCambioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HistorialCambioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HistorialCambioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HistorialCambioMaxAggregateInputType
  }

  export type GetHistorialCambioAggregateType<T extends HistorialCambioAggregateArgs> = {
        [P in keyof T & keyof AggregateHistorialCambio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistorialCambio[P]>
      : GetScalarType<T[P], AggregateHistorialCambio[P]>
  }




  export type HistorialCambioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistorialCambioWhereInput
    orderBy?: HistorialCambioOrderByWithAggregationInput | HistorialCambioOrderByWithAggregationInput[]
    by: HistorialCambioScalarFieldEnum[] | HistorialCambioScalarFieldEnum
    having?: HistorialCambioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HistorialCambioCountAggregateInputType | true
    _avg?: HistorialCambioAvgAggregateInputType
    _sum?: HistorialCambioSumAggregateInputType
    _min?: HistorialCambioMinAggregateInputType
    _max?: HistorialCambioMaxAggregateInputType
  }

  export type HistorialCambioGroupByOutputType = {
    id: number
    turnoId: number
    tipoCambio: $Enums.TipoCambio
    descripcion: string
    fechaCambio: Date
    usuarioId: number | null
    datosAnteriores: JsonValue | null
    datosNuevos: JsonValue | null
    _count: HistorialCambioCountAggregateOutputType | null
    _avg: HistorialCambioAvgAggregateOutputType | null
    _sum: HistorialCambioSumAggregateOutputType | null
    _min: HistorialCambioMinAggregateOutputType | null
    _max: HistorialCambioMaxAggregateOutputType | null
  }

  type GetHistorialCambioGroupByPayload<T extends HistorialCambioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HistorialCambioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HistorialCambioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HistorialCambioGroupByOutputType[P]>
            : GetScalarType<T[P], HistorialCambioGroupByOutputType[P]>
        }
      >
    >


  export type HistorialCambioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    turnoId?: boolean
    tipoCambio?: boolean
    descripcion?: boolean
    fechaCambio?: boolean
    usuarioId?: boolean
    datosAnteriores?: boolean
    datosNuevos?: boolean
    turno?: boolean | TurnoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historialCambio"]>

  export type HistorialCambioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    turnoId?: boolean
    tipoCambio?: boolean
    descripcion?: boolean
    fechaCambio?: boolean
    usuarioId?: boolean
    datosAnteriores?: boolean
    datosNuevos?: boolean
    turno?: boolean | TurnoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historialCambio"]>

  export type HistorialCambioSelectScalar = {
    id?: boolean
    turnoId?: boolean
    tipoCambio?: boolean
    descripcion?: boolean
    fechaCambio?: boolean
    usuarioId?: boolean
    datosAnteriores?: boolean
    datosNuevos?: boolean
  }

  export type HistorialCambioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    turno?: boolean | TurnoDefaultArgs<ExtArgs>
  }
  export type HistorialCambioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    turno?: boolean | TurnoDefaultArgs<ExtArgs>
  }

  export type $HistorialCambioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HistorialCambio"
    objects: {
      turno: Prisma.$TurnoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      turnoId: number
      tipoCambio: $Enums.TipoCambio
      descripcion: string
      fechaCambio: Date
      usuarioId: number | null
      datosAnteriores: Prisma.JsonValue | null
      datosNuevos: Prisma.JsonValue | null
    }, ExtArgs["result"]["historialCambio"]>
    composites: {}
  }

  type HistorialCambioGetPayload<S extends boolean | null | undefined | HistorialCambioDefaultArgs> = $Result.GetResult<Prisma.$HistorialCambioPayload, S>

  type HistorialCambioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HistorialCambioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HistorialCambioCountAggregateInputType | true
    }

  export interface HistorialCambioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HistorialCambio'], meta: { name: 'HistorialCambio' } }
    /**
     * Find zero or one HistorialCambio that matches the filter.
     * @param {HistorialCambioFindUniqueArgs} args - Arguments to find a HistorialCambio
     * @example
     * // Get one HistorialCambio
     * const historialCambio = await prisma.historialCambio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HistorialCambioFindUniqueArgs>(args: SelectSubset<T, HistorialCambioFindUniqueArgs<ExtArgs>>): Prisma__HistorialCambioClient<$Result.GetResult<Prisma.$HistorialCambioPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one HistorialCambio that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HistorialCambioFindUniqueOrThrowArgs} args - Arguments to find a HistorialCambio
     * @example
     * // Get one HistorialCambio
     * const historialCambio = await prisma.historialCambio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HistorialCambioFindUniqueOrThrowArgs>(args: SelectSubset<T, HistorialCambioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HistorialCambioClient<$Result.GetResult<Prisma.$HistorialCambioPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first HistorialCambio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialCambioFindFirstArgs} args - Arguments to find a HistorialCambio
     * @example
     * // Get one HistorialCambio
     * const historialCambio = await prisma.historialCambio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HistorialCambioFindFirstArgs>(args?: SelectSubset<T, HistorialCambioFindFirstArgs<ExtArgs>>): Prisma__HistorialCambioClient<$Result.GetResult<Prisma.$HistorialCambioPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first HistorialCambio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialCambioFindFirstOrThrowArgs} args - Arguments to find a HistorialCambio
     * @example
     * // Get one HistorialCambio
     * const historialCambio = await prisma.historialCambio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HistorialCambioFindFirstOrThrowArgs>(args?: SelectSubset<T, HistorialCambioFindFirstOrThrowArgs<ExtArgs>>): Prisma__HistorialCambioClient<$Result.GetResult<Prisma.$HistorialCambioPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more HistorialCambios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialCambioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HistorialCambios
     * const historialCambios = await prisma.historialCambio.findMany()
     * 
     * // Get first 10 HistorialCambios
     * const historialCambios = await prisma.historialCambio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const historialCambioWithIdOnly = await prisma.historialCambio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HistorialCambioFindManyArgs>(args?: SelectSubset<T, HistorialCambioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistorialCambioPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a HistorialCambio.
     * @param {HistorialCambioCreateArgs} args - Arguments to create a HistorialCambio.
     * @example
     * // Create one HistorialCambio
     * const HistorialCambio = await prisma.historialCambio.create({
     *   data: {
     *     // ... data to create a HistorialCambio
     *   }
     * })
     * 
     */
    create<T extends HistorialCambioCreateArgs>(args: SelectSubset<T, HistorialCambioCreateArgs<ExtArgs>>): Prisma__HistorialCambioClient<$Result.GetResult<Prisma.$HistorialCambioPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many HistorialCambios.
     * @param {HistorialCambioCreateManyArgs} args - Arguments to create many HistorialCambios.
     * @example
     * // Create many HistorialCambios
     * const historialCambio = await prisma.historialCambio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HistorialCambioCreateManyArgs>(args?: SelectSubset<T, HistorialCambioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HistorialCambios and returns the data saved in the database.
     * @param {HistorialCambioCreateManyAndReturnArgs} args - Arguments to create many HistorialCambios.
     * @example
     * // Create many HistorialCambios
     * const historialCambio = await prisma.historialCambio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HistorialCambios and only return the `id`
     * const historialCambioWithIdOnly = await prisma.historialCambio.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HistorialCambioCreateManyAndReturnArgs>(args?: SelectSubset<T, HistorialCambioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistorialCambioPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a HistorialCambio.
     * @param {HistorialCambioDeleteArgs} args - Arguments to delete one HistorialCambio.
     * @example
     * // Delete one HistorialCambio
     * const HistorialCambio = await prisma.historialCambio.delete({
     *   where: {
     *     // ... filter to delete one HistorialCambio
     *   }
     * })
     * 
     */
    delete<T extends HistorialCambioDeleteArgs>(args: SelectSubset<T, HistorialCambioDeleteArgs<ExtArgs>>): Prisma__HistorialCambioClient<$Result.GetResult<Prisma.$HistorialCambioPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one HistorialCambio.
     * @param {HistorialCambioUpdateArgs} args - Arguments to update one HistorialCambio.
     * @example
     * // Update one HistorialCambio
     * const historialCambio = await prisma.historialCambio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HistorialCambioUpdateArgs>(args: SelectSubset<T, HistorialCambioUpdateArgs<ExtArgs>>): Prisma__HistorialCambioClient<$Result.GetResult<Prisma.$HistorialCambioPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more HistorialCambios.
     * @param {HistorialCambioDeleteManyArgs} args - Arguments to filter HistorialCambios to delete.
     * @example
     * // Delete a few HistorialCambios
     * const { count } = await prisma.historialCambio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HistorialCambioDeleteManyArgs>(args?: SelectSubset<T, HistorialCambioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HistorialCambios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialCambioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HistorialCambios
     * const historialCambio = await prisma.historialCambio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HistorialCambioUpdateManyArgs>(args: SelectSubset<T, HistorialCambioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HistorialCambio.
     * @param {HistorialCambioUpsertArgs} args - Arguments to update or create a HistorialCambio.
     * @example
     * // Update or create a HistorialCambio
     * const historialCambio = await prisma.historialCambio.upsert({
     *   create: {
     *     // ... data to create a HistorialCambio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HistorialCambio we want to update
     *   }
     * })
     */
    upsert<T extends HistorialCambioUpsertArgs>(args: SelectSubset<T, HistorialCambioUpsertArgs<ExtArgs>>): Prisma__HistorialCambioClient<$Result.GetResult<Prisma.$HistorialCambioPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of HistorialCambios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialCambioCountArgs} args - Arguments to filter HistorialCambios to count.
     * @example
     * // Count the number of HistorialCambios
     * const count = await prisma.historialCambio.count({
     *   where: {
     *     // ... the filter for the HistorialCambios we want to count
     *   }
     * })
    **/
    count<T extends HistorialCambioCountArgs>(
      args?: Subset<T, HistorialCambioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HistorialCambioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HistorialCambio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialCambioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HistorialCambioAggregateArgs>(args: Subset<T, HistorialCambioAggregateArgs>): Prisma.PrismaPromise<GetHistorialCambioAggregateType<T>>

    /**
     * Group by HistorialCambio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistorialCambioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HistorialCambioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HistorialCambioGroupByArgs['orderBy'] }
        : { orderBy?: HistorialCambioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HistorialCambioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistorialCambioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HistorialCambio model
   */
  readonly fields: HistorialCambioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HistorialCambio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HistorialCambioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    turno<T extends TurnoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TurnoDefaultArgs<ExtArgs>>): Prisma__TurnoClient<$Result.GetResult<Prisma.$TurnoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HistorialCambio model
   */ 
  interface HistorialCambioFieldRefs {
    readonly id: FieldRef<"HistorialCambio", 'Int'>
    readonly turnoId: FieldRef<"HistorialCambio", 'Int'>
    readonly tipoCambio: FieldRef<"HistorialCambio", 'TipoCambio'>
    readonly descripcion: FieldRef<"HistorialCambio", 'String'>
    readonly fechaCambio: FieldRef<"HistorialCambio", 'DateTime'>
    readonly usuarioId: FieldRef<"HistorialCambio", 'Int'>
    readonly datosAnteriores: FieldRef<"HistorialCambio", 'Json'>
    readonly datosNuevos: FieldRef<"HistorialCambio", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * HistorialCambio findUnique
   */
  export type HistorialCambioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCambio
     */
    select?: HistorialCambioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCambioInclude<ExtArgs> | null
    /**
     * Filter, which HistorialCambio to fetch.
     */
    where: HistorialCambioWhereUniqueInput
  }

  /**
   * HistorialCambio findUniqueOrThrow
   */
  export type HistorialCambioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCambio
     */
    select?: HistorialCambioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCambioInclude<ExtArgs> | null
    /**
     * Filter, which HistorialCambio to fetch.
     */
    where: HistorialCambioWhereUniqueInput
  }

  /**
   * HistorialCambio findFirst
   */
  export type HistorialCambioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCambio
     */
    select?: HistorialCambioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCambioInclude<ExtArgs> | null
    /**
     * Filter, which HistorialCambio to fetch.
     */
    where?: HistorialCambioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistorialCambios to fetch.
     */
    orderBy?: HistorialCambioOrderByWithRelationInput | HistorialCambioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HistorialCambios.
     */
    cursor?: HistorialCambioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistorialCambios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistorialCambios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HistorialCambios.
     */
    distinct?: HistorialCambioScalarFieldEnum | HistorialCambioScalarFieldEnum[]
  }

  /**
   * HistorialCambio findFirstOrThrow
   */
  export type HistorialCambioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCambio
     */
    select?: HistorialCambioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCambioInclude<ExtArgs> | null
    /**
     * Filter, which HistorialCambio to fetch.
     */
    where?: HistorialCambioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistorialCambios to fetch.
     */
    orderBy?: HistorialCambioOrderByWithRelationInput | HistorialCambioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HistorialCambios.
     */
    cursor?: HistorialCambioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistorialCambios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistorialCambios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HistorialCambios.
     */
    distinct?: HistorialCambioScalarFieldEnum | HistorialCambioScalarFieldEnum[]
  }

  /**
   * HistorialCambio findMany
   */
  export type HistorialCambioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCambio
     */
    select?: HistorialCambioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCambioInclude<ExtArgs> | null
    /**
     * Filter, which HistorialCambios to fetch.
     */
    where?: HistorialCambioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistorialCambios to fetch.
     */
    orderBy?: HistorialCambioOrderByWithRelationInput | HistorialCambioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HistorialCambios.
     */
    cursor?: HistorialCambioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistorialCambios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistorialCambios.
     */
    skip?: number
    distinct?: HistorialCambioScalarFieldEnum | HistorialCambioScalarFieldEnum[]
  }

  /**
   * HistorialCambio create
   */
  export type HistorialCambioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCambio
     */
    select?: HistorialCambioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCambioInclude<ExtArgs> | null
    /**
     * The data needed to create a HistorialCambio.
     */
    data: XOR<HistorialCambioCreateInput, HistorialCambioUncheckedCreateInput>
  }

  /**
   * HistorialCambio createMany
   */
  export type HistorialCambioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HistorialCambios.
     */
    data: HistorialCambioCreateManyInput | HistorialCambioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HistorialCambio createManyAndReturn
   */
  export type HistorialCambioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCambio
     */
    select?: HistorialCambioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many HistorialCambios.
     */
    data: HistorialCambioCreateManyInput | HistorialCambioCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCambioIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * HistorialCambio update
   */
  export type HistorialCambioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCambio
     */
    select?: HistorialCambioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCambioInclude<ExtArgs> | null
    /**
     * The data needed to update a HistorialCambio.
     */
    data: XOR<HistorialCambioUpdateInput, HistorialCambioUncheckedUpdateInput>
    /**
     * Choose, which HistorialCambio to update.
     */
    where: HistorialCambioWhereUniqueInput
  }

  /**
   * HistorialCambio updateMany
   */
  export type HistorialCambioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HistorialCambios.
     */
    data: XOR<HistorialCambioUpdateManyMutationInput, HistorialCambioUncheckedUpdateManyInput>
    /**
     * Filter which HistorialCambios to update
     */
    where?: HistorialCambioWhereInput
  }

  /**
   * HistorialCambio upsert
   */
  export type HistorialCambioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCambio
     */
    select?: HistorialCambioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCambioInclude<ExtArgs> | null
    /**
     * The filter to search for the HistorialCambio to update in case it exists.
     */
    where: HistorialCambioWhereUniqueInput
    /**
     * In case the HistorialCambio found by the `where` argument doesn't exist, create a new HistorialCambio with this data.
     */
    create: XOR<HistorialCambioCreateInput, HistorialCambioUncheckedCreateInput>
    /**
     * In case the HistorialCambio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HistorialCambioUpdateInput, HistorialCambioUncheckedUpdateInput>
  }

  /**
   * HistorialCambio delete
   */
  export type HistorialCambioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCambio
     */
    select?: HistorialCambioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCambioInclude<ExtArgs> | null
    /**
     * Filter which HistorialCambio to delete.
     */
    where: HistorialCambioWhereUniqueInput
  }

  /**
   * HistorialCambio deleteMany
   */
  export type HistorialCambioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HistorialCambios to delete
     */
    where?: HistorialCambioWhereInput
  }

  /**
   * HistorialCambio without action
   */
  export type HistorialCambioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistorialCambio
     */
    select?: HistorialCambioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistorialCambioInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TurnoScalarFieldEnum: {
    id: 'id',
    pacienteId: 'pacienteId',
    medicoId: 'medicoId',
    fecha: 'fecha',
    hora: 'hora',
    diaSemana: 'diaSemana',
    estado: 'estado',
    motivo: 'motivo',
    observaciones: 'observaciones',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TurnoScalarFieldEnum = (typeof TurnoScalarFieldEnum)[keyof typeof TurnoScalarFieldEnum]


  export const HistorialCambioScalarFieldEnum: {
    id: 'id',
    turnoId: 'turnoId',
    tipoCambio: 'tipoCambio',
    descripcion: 'descripcion',
    fechaCambio: 'fechaCambio',
    usuarioId: 'usuarioId',
    datosAnteriores: 'datosAnteriores',
    datosNuevos: 'datosNuevos'
  };

  export type HistorialCambioScalarFieldEnum = (typeof HistorialCambioScalarFieldEnum)[keyof typeof HistorialCambioScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'EstadoTurno'
   */
  export type EnumEstadoTurnoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoTurno'>
    


  /**
   * Reference to a field of type 'EstadoTurno[]'
   */
  export type ListEnumEstadoTurnoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EstadoTurno[]'>
    


  /**
   * Reference to a field of type 'TipoCambio'
   */
  export type EnumTipoCambioFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoCambio'>
    


  /**
   * Reference to a field of type 'TipoCambio[]'
   */
  export type ListEnumTipoCambioFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoCambio[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type TurnoWhereInput = {
    AND?: TurnoWhereInput | TurnoWhereInput[]
    OR?: TurnoWhereInput[]
    NOT?: TurnoWhereInput | TurnoWhereInput[]
    id?: IntFilter<"Turno"> | number
    pacienteId?: IntFilter<"Turno"> | number
    medicoId?: IntFilter<"Turno"> | number
    fecha?: DateTimeFilter<"Turno"> | Date | string
    hora?: StringFilter<"Turno"> | string
    diaSemana?: IntFilter<"Turno"> | number
    estado?: EnumEstadoTurnoFilter<"Turno"> | $Enums.EstadoTurno
    motivo?: StringNullableFilter<"Turno"> | string | null
    observaciones?: StringNullableFilter<"Turno"> | string | null
    createdAt?: DateTimeFilter<"Turno"> | Date | string
    updatedAt?: DateTimeFilter<"Turno"> | Date | string
    historialCambios?: HistorialCambioListRelationFilter
  }

  export type TurnoOrderByWithRelationInput = {
    id?: SortOrder
    pacienteId?: SortOrder
    medicoId?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
    diaSemana?: SortOrder
    estado?: SortOrder
    motivo?: SortOrderInput | SortOrder
    observaciones?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    historialCambios?: HistorialCambioOrderByRelationAggregateInput
  }

  export type TurnoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TurnoWhereInput | TurnoWhereInput[]
    OR?: TurnoWhereInput[]
    NOT?: TurnoWhereInput | TurnoWhereInput[]
    pacienteId?: IntFilter<"Turno"> | number
    medicoId?: IntFilter<"Turno"> | number
    fecha?: DateTimeFilter<"Turno"> | Date | string
    hora?: StringFilter<"Turno"> | string
    diaSemana?: IntFilter<"Turno"> | number
    estado?: EnumEstadoTurnoFilter<"Turno"> | $Enums.EstadoTurno
    motivo?: StringNullableFilter<"Turno"> | string | null
    observaciones?: StringNullableFilter<"Turno"> | string | null
    createdAt?: DateTimeFilter<"Turno"> | Date | string
    updatedAt?: DateTimeFilter<"Turno"> | Date | string
    historialCambios?: HistorialCambioListRelationFilter
  }, "id">

  export type TurnoOrderByWithAggregationInput = {
    id?: SortOrder
    pacienteId?: SortOrder
    medicoId?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
    diaSemana?: SortOrder
    estado?: SortOrder
    motivo?: SortOrderInput | SortOrder
    observaciones?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TurnoCountOrderByAggregateInput
    _avg?: TurnoAvgOrderByAggregateInput
    _max?: TurnoMaxOrderByAggregateInput
    _min?: TurnoMinOrderByAggregateInput
    _sum?: TurnoSumOrderByAggregateInput
  }

  export type TurnoScalarWhereWithAggregatesInput = {
    AND?: TurnoScalarWhereWithAggregatesInput | TurnoScalarWhereWithAggregatesInput[]
    OR?: TurnoScalarWhereWithAggregatesInput[]
    NOT?: TurnoScalarWhereWithAggregatesInput | TurnoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Turno"> | number
    pacienteId?: IntWithAggregatesFilter<"Turno"> | number
    medicoId?: IntWithAggregatesFilter<"Turno"> | number
    fecha?: DateTimeWithAggregatesFilter<"Turno"> | Date | string
    hora?: StringWithAggregatesFilter<"Turno"> | string
    diaSemana?: IntWithAggregatesFilter<"Turno"> | number
    estado?: EnumEstadoTurnoWithAggregatesFilter<"Turno"> | $Enums.EstadoTurno
    motivo?: StringNullableWithAggregatesFilter<"Turno"> | string | null
    observaciones?: StringNullableWithAggregatesFilter<"Turno"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Turno"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Turno"> | Date | string
  }

  export type HistorialCambioWhereInput = {
    AND?: HistorialCambioWhereInput | HistorialCambioWhereInput[]
    OR?: HistorialCambioWhereInput[]
    NOT?: HistorialCambioWhereInput | HistorialCambioWhereInput[]
    id?: IntFilter<"HistorialCambio"> | number
    turnoId?: IntFilter<"HistorialCambio"> | number
    tipoCambio?: EnumTipoCambioFilter<"HistorialCambio"> | $Enums.TipoCambio
    descripcion?: StringFilter<"HistorialCambio"> | string
    fechaCambio?: DateTimeFilter<"HistorialCambio"> | Date | string
    usuarioId?: IntNullableFilter<"HistorialCambio"> | number | null
    datosAnteriores?: JsonNullableFilter<"HistorialCambio">
    datosNuevos?: JsonNullableFilter<"HistorialCambio">
    turno?: XOR<TurnoRelationFilter, TurnoWhereInput>
  }

  export type HistorialCambioOrderByWithRelationInput = {
    id?: SortOrder
    turnoId?: SortOrder
    tipoCambio?: SortOrder
    descripcion?: SortOrder
    fechaCambio?: SortOrder
    usuarioId?: SortOrderInput | SortOrder
    datosAnteriores?: SortOrderInput | SortOrder
    datosNuevos?: SortOrderInput | SortOrder
    turno?: TurnoOrderByWithRelationInput
  }

  export type HistorialCambioWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HistorialCambioWhereInput | HistorialCambioWhereInput[]
    OR?: HistorialCambioWhereInput[]
    NOT?: HistorialCambioWhereInput | HistorialCambioWhereInput[]
    turnoId?: IntFilter<"HistorialCambio"> | number
    tipoCambio?: EnumTipoCambioFilter<"HistorialCambio"> | $Enums.TipoCambio
    descripcion?: StringFilter<"HistorialCambio"> | string
    fechaCambio?: DateTimeFilter<"HistorialCambio"> | Date | string
    usuarioId?: IntNullableFilter<"HistorialCambio"> | number | null
    datosAnteriores?: JsonNullableFilter<"HistorialCambio">
    datosNuevos?: JsonNullableFilter<"HistorialCambio">
    turno?: XOR<TurnoRelationFilter, TurnoWhereInput>
  }, "id">

  export type HistorialCambioOrderByWithAggregationInput = {
    id?: SortOrder
    turnoId?: SortOrder
    tipoCambio?: SortOrder
    descripcion?: SortOrder
    fechaCambio?: SortOrder
    usuarioId?: SortOrderInput | SortOrder
    datosAnteriores?: SortOrderInput | SortOrder
    datosNuevos?: SortOrderInput | SortOrder
    _count?: HistorialCambioCountOrderByAggregateInput
    _avg?: HistorialCambioAvgOrderByAggregateInput
    _max?: HistorialCambioMaxOrderByAggregateInput
    _min?: HistorialCambioMinOrderByAggregateInput
    _sum?: HistorialCambioSumOrderByAggregateInput
  }

  export type HistorialCambioScalarWhereWithAggregatesInput = {
    AND?: HistorialCambioScalarWhereWithAggregatesInput | HistorialCambioScalarWhereWithAggregatesInput[]
    OR?: HistorialCambioScalarWhereWithAggregatesInput[]
    NOT?: HistorialCambioScalarWhereWithAggregatesInput | HistorialCambioScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HistorialCambio"> | number
    turnoId?: IntWithAggregatesFilter<"HistorialCambio"> | number
    tipoCambio?: EnumTipoCambioWithAggregatesFilter<"HistorialCambio"> | $Enums.TipoCambio
    descripcion?: StringWithAggregatesFilter<"HistorialCambio"> | string
    fechaCambio?: DateTimeWithAggregatesFilter<"HistorialCambio"> | Date | string
    usuarioId?: IntNullableWithAggregatesFilter<"HistorialCambio"> | number | null
    datosAnteriores?: JsonNullableWithAggregatesFilter<"HistorialCambio">
    datosNuevos?: JsonNullableWithAggregatesFilter<"HistorialCambio">
  }

  export type TurnoCreateInput = {
    pacienteId: number
    medicoId: number
    fecha: Date | string
    hora: string
    diaSemana: number
    estado?: $Enums.EstadoTurno
    motivo?: string | null
    observaciones?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    historialCambios?: HistorialCambioCreateNestedManyWithoutTurnoInput
  }

  export type TurnoUncheckedCreateInput = {
    id?: number
    pacienteId: number
    medicoId: number
    fecha: Date | string
    hora: string
    diaSemana: number
    estado?: $Enums.EstadoTurno
    motivo?: string | null
    observaciones?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    historialCambios?: HistorialCambioUncheckedCreateNestedManyWithoutTurnoInput
  }

  export type TurnoUpdateInput = {
    pacienteId?: IntFieldUpdateOperationsInput | number
    medicoId?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: StringFieldUpdateOperationsInput | string
    diaSemana?: IntFieldUpdateOperationsInput | number
    estado?: EnumEstadoTurnoFieldUpdateOperationsInput | $Enums.EstadoTurno
    motivo?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    historialCambios?: HistorialCambioUpdateManyWithoutTurnoNestedInput
  }

  export type TurnoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    pacienteId?: IntFieldUpdateOperationsInput | number
    medicoId?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: StringFieldUpdateOperationsInput | string
    diaSemana?: IntFieldUpdateOperationsInput | number
    estado?: EnumEstadoTurnoFieldUpdateOperationsInput | $Enums.EstadoTurno
    motivo?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    historialCambios?: HistorialCambioUncheckedUpdateManyWithoutTurnoNestedInput
  }

  export type TurnoCreateManyInput = {
    id?: number
    pacienteId: number
    medicoId: number
    fecha: Date | string
    hora: string
    diaSemana: number
    estado?: $Enums.EstadoTurno
    motivo?: string | null
    observaciones?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TurnoUpdateManyMutationInput = {
    pacienteId?: IntFieldUpdateOperationsInput | number
    medicoId?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: StringFieldUpdateOperationsInput | string
    diaSemana?: IntFieldUpdateOperationsInput | number
    estado?: EnumEstadoTurnoFieldUpdateOperationsInput | $Enums.EstadoTurno
    motivo?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TurnoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    pacienteId?: IntFieldUpdateOperationsInput | number
    medicoId?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: StringFieldUpdateOperationsInput | string
    diaSemana?: IntFieldUpdateOperationsInput | number
    estado?: EnumEstadoTurnoFieldUpdateOperationsInput | $Enums.EstadoTurno
    motivo?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistorialCambioCreateInput = {
    tipoCambio: $Enums.TipoCambio
    descripcion: string
    fechaCambio?: Date | string
    usuarioId?: number | null
    datosAnteriores?: NullableJsonNullValueInput | InputJsonValue
    datosNuevos?: NullableJsonNullValueInput | InputJsonValue
    turno: TurnoCreateNestedOneWithoutHistorialCambiosInput
  }

  export type HistorialCambioUncheckedCreateInput = {
    id?: number
    turnoId: number
    tipoCambio: $Enums.TipoCambio
    descripcion: string
    fechaCambio?: Date | string
    usuarioId?: number | null
    datosAnteriores?: NullableJsonNullValueInput | InputJsonValue
    datosNuevos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type HistorialCambioUpdateInput = {
    tipoCambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaCambio?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    datosAnteriores?: NullableJsonNullValueInput | InputJsonValue
    datosNuevos?: NullableJsonNullValueInput | InputJsonValue
    turno?: TurnoUpdateOneRequiredWithoutHistorialCambiosNestedInput
  }

  export type HistorialCambioUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    turnoId?: IntFieldUpdateOperationsInput | number
    tipoCambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaCambio?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    datosAnteriores?: NullableJsonNullValueInput | InputJsonValue
    datosNuevos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type HistorialCambioCreateManyInput = {
    id?: number
    turnoId: number
    tipoCambio: $Enums.TipoCambio
    descripcion: string
    fechaCambio?: Date | string
    usuarioId?: number | null
    datosAnteriores?: NullableJsonNullValueInput | InputJsonValue
    datosNuevos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type HistorialCambioUpdateManyMutationInput = {
    tipoCambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaCambio?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    datosAnteriores?: NullableJsonNullValueInput | InputJsonValue
    datosNuevos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type HistorialCambioUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    turnoId?: IntFieldUpdateOperationsInput | number
    tipoCambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaCambio?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    datosAnteriores?: NullableJsonNullValueInput | InputJsonValue
    datosNuevos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumEstadoTurnoFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoTurno | EnumEstadoTurnoFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoTurno[] | ListEnumEstadoTurnoFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoTurno[] | ListEnumEstadoTurnoFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoTurnoFilter<$PrismaModel> | $Enums.EstadoTurno
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type HistorialCambioListRelationFilter = {
    every?: HistorialCambioWhereInput
    some?: HistorialCambioWhereInput
    none?: HistorialCambioWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type HistorialCambioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TurnoCountOrderByAggregateInput = {
    id?: SortOrder
    pacienteId?: SortOrder
    medicoId?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
    diaSemana?: SortOrder
    estado?: SortOrder
    motivo?: SortOrder
    observaciones?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TurnoAvgOrderByAggregateInput = {
    id?: SortOrder
    pacienteId?: SortOrder
    medicoId?: SortOrder
    diaSemana?: SortOrder
  }

  export type TurnoMaxOrderByAggregateInput = {
    id?: SortOrder
    pacienteId?: SortOrder
    medicoId?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
    diaSemana?: SortOrder
    estado?: SortOrder
    motivo?: SortOrder
    observaciones?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TurnoMinOrderByAggregateInput = {
    id?: SortOrder
    pacienteId?: SortOrder
    medicoId?: SortOrder
    fecha?: SortOrder
    hora?: SortOrder
    diaSemana?: SortOrder
    estado?: SortOrder
    motivo?: SortOrder
    observaciones?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TurnoSumOrderByAggregateInput = {
    id?: SortOrder
    pacienteId?: SortOrder
    medicoId?: SortOrder
    diaSemana?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumEstadoTurnoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoTurno | EnumEstadoTurnoFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoTurno[] | ListEnumEstadoTurnoFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoTurno[] | ListEnumEstadoTurnoFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoTurnoWithAggregatesFilter<$PrismaModel> | $Enums.EstadoTurno
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoTurnoFilter<$PrismaModel>
    _max?: NestedEnumEstadoTurnoFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumTipoCambioFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoCambio | EnumTipoCambioFieldRefInput<$PrismaModel>
    in?: $Enums.TipoCambio[] | ListEnumTipoCambioFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoCambio[] | ListEnumTipoCambioFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoCambioFilter<$PrismaModel> | $Enums.TipoCambio
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type TurnoRelationFilter = {
    is?: TurnoWhereInput
    isNot?: TurnoWhereInput
  }

  export type HistorialCambioCountOrderByAggregateInput = {
    id?: SortOrder
    turnoId?: SortOrder
    tipoCambio?: SortOrder
    descripcion?: SortOrder
    fechaCambio?: SortOrder
    usuarioId?: SortOrder
    datosAnteriores?: SortOrder
    datosNuevos?: SortOrder
  }

  export type HistorialCambioAvgOrderByAggregateInput = {
    id?: SortOrder
    turnoId?: SortOrder
    usuarioId?: SortOrder
  }

  export type HistorialCambioMaxOrderByAggregateInput = {
    id?: SortOrder
    turnoId?: SortOrder
    tipoCambio?: SortOrder
    descripcion?: SortOrder
    fechaCambio?: SortOrder
    usuarioId?: SortOrder
  }

  export type HistorialCambioMinOrderByAggregateInput = {
    id?: SortOrder
    turnoId?: SortOrder
    tipoCambio?: SortOrder
    descripcion?: SortOrder
    fechaCambio?: SortOrder
    usuarioId?: SortOrder
  }

  export type HistorialCambioSumOrderByAggregateInput = {
    id?: SortOrder
    turnoId?: SortOrder
    usuarioId?: SortOrder
  }

  export type EnumTipoCambioWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoCambio | EnumTipoCambioFieldRefInput<$PrismaModel>
    in?: $Enums.TipoCambio[] | ListEnumTipoCambioFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoCambio[] | ListEnumTipoCambioFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoCambioWithAggregatesFilter<$PrismaModel> | $Enums.TipoCambio
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoCambioFilter<$PrismaModel>
    _max?: NestedEnumTipoCambioFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type HistorialCambioCreateNestedManyWithoutTurnoInput = {
    create?: XOR<HistorialCambioCreateWithoutTurnoInput, HistorialCambioUncheckedCreateWithoutTurnoInput> | HistorialCambioCreateWithoutTurnoInput[] | HistorialCambioUncheckedCreateWithoutTurnoInput[]
    connectOrCreate?: HistorialCambioCreateOrConnectWithoutTurnoInput | HistorialCambioCreateOrConnectWithoutTurnoInput[]
    createMany?: HistorialCambioCreateManyTurnoInputEnvelope
    connect?: HistorialCambioWhereUniqueInput | HistorialCambioWhereUniqueInput[]
  }

  export type HistorialCambioUncheckedCreateNestedManyWithoutTurnoInput = {
    create?: XOR<HistorialCambioCreateWithoutTurnoInput, HistorialCambioUncheckedCreateWithoutTurnoInput> | HistorialCambioCreateWithoutTurnoInput[] | HistorialCambioUncheckedCreateWithoutTurnoInput[]
    connectOrCreate?: HistorialCambioCreateOrConnectWithoutTurnoInput | HistorialCambioCreateOrConnectWithoutTurnoInput[]
    createMany?: HistorialCambioCreateManyTurnoInputEnvelope
    connect?: HistorialCambioWhereUniqueInput | HistorialCambioWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumEstadoTurnoFieldUpdateOperationsInput = {
    set?: $Enums.EstadoTurno
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type HistorialCambioUpdateManyWithoutTurnoNestedInput = {
    create?: XOR<HistorialCambioCreateWithoutTurnoInput, HistorialCambioUncheckedCreateWithoutTurnoInput> | HistorialCambioCreateWithoutTurnoInput[] | HistorialCambioUncheckedCreateWithoutTurnoInput[]
    connectOrCreate?: HistorialCambioCreateOrConnectWithoutTurnoInput | HistorialCambioCreateOrConnectWithoutTurnoInput[]
    upsert?: HistorialCambioUpsertWithWhereUniqueWithoutTurnoInput | HistorialCambioUpsertWithWhereUniqueWithoutTurnoInput[]
    createMany?: HistorialCambioCreateManyTurnoInputEnvelope
    set?: HistorialCambioWhereUniqueInput | HistorialCambioWhereUniqueInput[]
    disconnect?: HistorialCambioWhereUniqueInput | HistorialCambioWhereUniqueInput[]
    delete?: HistorialCambioWhereUniqueInput | HistorialCambioWhereUniqueInput[]
    connect?: HistorialCambioWhereUniqueInput | HistorialCambioWhereUniqueInput[]
    update?: HistorialCambioUpdateWithWhereUniqueWithoutTurnoInput | HistorialCambioUpdateWithWhereUniqueWithoutTurnoInput[]
    updateMany?: HistorialCambioUpdateManyWithWhereWithoutTurnoInput | HistorialCambioUpdateManyWithWhereWithoutTurnoInput[]
    deleteMany?: HistorialCambioScalarWhereInput | HistorialCambioScalarWhereInput[]
  }

  export type HistorialCambioUncheckedUpdateManyWithoutTurnoNestedInput = {
    create?: XOR<HistorialCambioCreateWithoutTurnoInput, HistorialCambioUncheckedCreateWithoutTurnoInput> | HistorialCambioCreateWithoutTurnoInput[] | HistorialCambioUncheckedCreateWithoutTurnoInput[]
    connectOrCreate?: HistorialCambioCreateOrConnectWithoutTurnoInput | HistorialCambioCreateOrConnectWithoutTurnoInput[]
    upsert?: HistorialCambioUpsertWithWhereUniqueWithoutTurnoInput | HistorialCambioUpsertWithWhereUniqueWithoutTurnoInput[]
    createMany?: HistorialCambioCreateManyTurnoInputEnvelope
    set?: HistorialCambioWhereUniqueInput | HistorialCambioWhereUniqueInput[]
    disconnect?: HistorialCambioWhereUniqueInput | HistorialCambioWhereUniqueInput[]
    delete?: HistorialCambioWhereUniqueInput | HistorialCambioWhereUniqueInput[]
    connect?: HistorialCambioWhereUniqueInput | HistorialCambioWhereUniqueInput[]
    update?: HistorialCambioUpdateWithWhereUniqueWithoutTurnoInput | HistorialCambioUpdateWithWhereUniqueWithoutTurnoInput[]
    updateMany?: HistorialCambioUpdateManyWithWhereWithoutTurnoInput | HistorialCambioUpdateManyWithWhereWithoutTurnoInput[]
    deleteMany?: HistorialCambioScalarWhereInput | HistorialCambioScalarWhereInput[]
  }

  export type TurnoCreateNestedOneWithoutHistorialCambiosInput = {
    create?: XOR<TurnoCreateWithoutHistorialCambiosInput, TurnoUncheckedCreateWithoutHistorialCambiosInput>
    connectOrCreate?: TurnoCreateOrConnectWithoutHistorialCambiosInput
    connect?: TurnoWhereUniqueInput
  }

  export type EnumTipoCambioFieldUpdateOperationsInput = {
    set?: $Enums.TipoCambio
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TurnoUpdateOneRequiredWithoutHistorialCambiosNestedInput = {
    create?: XOR<TurnoCreateWithoutHistorialCambiosInput, TurnoUncheckedCreateWithoutHistorialCambiosInput>
    connectOrCreate?: TurnoCreateOrConnectWithoutHistorialCambiosInput
    upsert?: TurnoUpsertWithoutHistorialCambiosInput
    connect?: TurnoWhereUniqueInput
    update?: XOR<XOR<TurnoUpdateToOneWithWhereWithoutHistorialCambiosInput, TurnoUpdateWithoutHistorialCambiosInput>, TurnoUncheckedUpdateWithoutHistorialCambiosInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumEstadoTurnoFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoTurno | EnumEstadoTurnoFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoTurno[] | ListEnumEstadoTurnoFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoTurno[] | ListEnumEstadoTurnoFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoTurnoFilter<$PrismaModel> | $Enums.EstadoTurno
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumEstadoTurnoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EstadoTurno | EnumEstadoTurnoFieldRefInput<$PrismaModel>
    in?: $Enums.EstadoTurno[] | ListEnumEstadoTurnoFieldRefInput<$PrismaModel>
    notIn?: $Enums.EstadoTurno[] | ListEnumEstadoTurnoFieldRefInput<$PrismaModel>
    not?: NestedEnumEstadoTurnoWithAggregatesFilter<$PrismaModel> | $Enums.EstadoTurno
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEstadoTurnoFilter<$PrismaModel>
    _max?: NestedEnumEstadoTurnoFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumTipoCambioFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoCambio | EnumTipoCambioFieldRefInput<$PrismaModel>
    in?: $Enums.TipoCambio[] | ListEnumTipoCambioFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoCambio[] | ListEnumTipoCambioFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoCambioFilter<$PrismaModel> | $Enums.TipoCambio
  }

  export type NestedEnumTipoCambioWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoCambio | EnumTipoCambioFieldRefInput<$PrismaModel>
    in?: $Enums.TipoCambio[] | ListEnumTipoCambioFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoCambio[] | ListEnumTipoCambioFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoCambioWithAggregatesFilter<$PrismaModel> | $Enums.TipoCambio
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoCambioFilter<$PrismaModel>
    _max?: NestedEnumTipoCambioFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type HistorialCambioCreateWithoutTurnoInput = {
    tipoCambio: $Enums.TipoCambio
    descripcion: string
    fechaCambio?: Date | string
    usuarioId?: number | null
    datosAnteriores?: NullableJsonNullValueInput | InputJsonValue
    datosNuevos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type HistorialCambioUncheckedCreateWithoutTurnoInput = {
    id?: number
    tipoCambio: $Enums.TipoCambio
    descripcion: string
    fechaCambio?: Date | string
    usuarioId?: number | null
    datosAnteriores?: NullableJsonNullValueInput | InputJsonValue
    datosNuevos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type HistorialCambioCreateOrConnectWithoutTurnoInput = {
    where: HistorialCambioWhereUniqueInput
    create: XOR<HistorialCambioCreateWithoutTurnoInput, HistorialCambioUncheckedCreateWithoutTurnoInput>
  }

  export type HistorialCambioCreateManyTurnoInputEnvelope = {
    data: HistorialCambioCreateManyTurnoInput | HistorialCambioCreateManyTurnoInput[]
    skipDuplicates?: boolean
  }

  export type HistorialCambioUpsertWithWhereUniqueWithoutTurnoInput = {
    where: HistorialCambioWhereUniqueInput
    update: XOR<HistorialCambioUpdateWithoutTurnoInput, HistorialCambioUncheckedUpdateWithoutTurnoInput>
    create: XOR<HistorialCambioCreateWithoutTurnoInput, HistorialCambioUncheckedCreateWithoutTurnoInput>
  }

  export type HistorialCambioUpdateWithWhereUniqueWithoutTurnoInput = {
    where: HistorialCambioWhereUniqueInput
    data: XOR<HistorialCambioUpdateWithoutTurnoInput, HistorialCambioUncheckedUpdateWithoutTurnoInput>
  }

  export type HistorialCambioUpdateManyWithWhereWithoutTurnoInput = {
    where: HistorialCambioScalarWhereInput
    data: XOR<HistorialCambioUpdateManyMutationInput, HistorialCambioUncheckedUpdateManyWithoutTurnoInput>
  }

  export type HistorialCambioScalarWhereInput = {
    AND?: HistorialCambioScalarWhereInput | HistorialCambioScalarWhereInput[]
    OR?: HistorialCambioScalarWhereInput[]
    NOT?: HistorialCambioScalarWhereInput | HistorialCambioScalarWhereInput[]
    id?: IntFilter<"HistorialCambio"> | number
    turnoId?: IntFilter<"HistorialCambio"> | number
    tipoCambio?: EnumTipoCambioFilter<"HistorialCambio"> | $Enums.TipoCambio
    descripcion?: StringFilter<"HistorialCambio"> | string
    fechaCambio?: DateTimeFilter<"HistorialCambio"> | Date | string
    usuarioId?: IntNullableFilter<"HistorialCambio"> | number | null
    datosAnteriores?: JsonNullableFilter<"HistorialCambio">
    datosNuevos?: JsonNullableFilter<"HistorialCambio">
  }

  export type TurnoCreateWithoutHistorialCambiosInput = {
    pacienteId: number
    medicoId: number
    fecha: Date | string
    hora: string
    diaSemana: number
    estado?: $Enums.EstadoTurno
    motivo?: string | null
    observaciones?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TurnoUncheckedCreateWithoutHistorialCambiosInput = {
    id?: number
    pacienteId: number
    medicoId: number
    fecha: Date | string
    hora: string
    diaSemana: number
    estado?: $Enums.EstadoTurno
    motivo?: string | null
    observaciones?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TurnoCreateOrConnectWithoutHistorialCambiosInput = {
    where: TurnoWhereUniqueInput
    create: XOR<TurnoCreateWithoutHistorialCambiosInput, TurnoUncheckedCreateWithoutHistorialCambiosInput>
  }

  export type TurnoUpsertWithoutHistorialCambiosInput = {
    update: XOR<TurnoUpdateWithoutHistorialCambiosInput, TurnoUncheckedUpdateWithoutHistorialCambiosInput>
    create: XOR<TurnoCreateWithoutHistorialCambiosInput, TurnoUncheckedCreateWithoutHistorialCambiosInput>
    where?: TurnoWhereInput
  }

  export type TurnoUpdateToOneWithWhereWithoutHistorialCambiosInput = {
    where?: TurnoWhereInput
    data: XOR<TurnoUpdateWithoutHistorialCambiosInput, TurnoUncheckedUpdateWithoutHistorialCambiosInput>
  }

  export type TurnoUpdateWithoutHistorialCambiosInput = {
    pacienteId?: IntFieldUpdateOperationsInput | number
    medicoId?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: StringFieldUpdateOperationsInput | string
    diaSemana?: IntFieldUpdateOperationsInput | number
    estado?: EnumEstadoTurnoFieldUpdateOperationsInput | $Enums.EstadoTurno
    motivo?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TurnoUncheckedUpdateWithoutHistorialCambiosInput = {
    id?: IntFieldUpdateOperationsInput | number
    pacienteId?: IntFieldUpdateOperationsInput | number
    medicoId?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    hora?: StringFieldUpdateOperationsInput | string
    diaSemana?: IntFieldUpdateOperationsInput | number
    estado?: EnumEstadoTurnoFieldUpdateOperationsInput | $Enums.EstadoTurno
    motivo?: NullableStringFieldUpdateOperationsInput | string | null
    observaciones?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistorialCambioCreateManyTurnoInput = {
    id?: number
    tipoCambio: $Enums.TipoCambio
    descripcion: string
    fechaCambio?: Date | string
    usuarioId?: number | null
    datosAnteriores?: NullableJsonNullValueInput | InputJsonValue
    datosNuevos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type HistorialCambioUpdateWithoutTurnoInput = {
    tipoCambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaCambio?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    datosAnteriores?: NullableJsonNullValueInput | InputJsonValue
    datosNuevos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type HistorialCambioUncheckedUpdateWithoutTurnoInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipoCambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaCambio?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    datosAnteriores?: NullableJsonNullValueInput | InputJsonValue
    datosNuevos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type HistorialCambioUncheckedUpdateManyWithoutTurnoInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipoCambio?: EnumTipoCambioFieldUpdateOperationsInput | $Enums.TipoCambio
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaCambio?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: NullableIntFieldUpdateOperationsInput | number | null
    datosAnteriores?: NullableJsonNullValueInput | InputJsonValue
    datosNuevos?: NullableJsonNullValueInput | InputJsonValue
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use TurnoCountOutputTypeDefaultArgs instead
     */
    export type TurnoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TurnoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TurnoDefaultArgs instead
     */
    export type TurnoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TurnoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HistorialCambioDefaultArgs instead
     */
    export type HistorialCambioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HistorialCambioDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}