{"ast":null,"code":"import api from'./api';export const medicosService={// Obtener todos los m√©dicos\nasync getAllMedicos(){const response=await api.get('/medicos');return response.data.data;},// Obtener m√©dico por ID\nasync getMedicoById(id){const response=await api.get(\"/medicos/\".concat(id));return response.data.data;},// Crear nuevo m√©dico\nasync createMedico(medicoData){console.log('üì§ M√âDICOS SERVICE - Enviando datos a /medicos:',{endpoint:'/medicos',method:'POST',datos:medicoData,timestamp:new Date().toISOString()});const response=await api.post('/medicos',medicoData);console.log('üì• M√âDICOS SERVICE - Respuesta recibida:',{status:response.status,data:response.data,timestamp:new Date().toISOString()});return response.data.data;},// Actualizar m√©dico\nasync updateMedico(id,medicoData){console.log('üì§ M√âDICOS SERVICE - Enviando datos a /medicos/'+id+':',{endpoint:\"/medicos/\".concat(id),method:'PUT',datos:medicoData,timestamp:new Date().toISOString()});const response=await api.put(\"/medicos/\".concat(id),medicoData);console.log('üì• M√âDICOS SERVICE - Respuesta recibida:',{status:response.status,data:response.data,timestamp:new Date().toISOString()});return response.data.data;},// Eliminar m√©dico (soft delete)\nasync deleteMedico(id){console.log('üóëÔ∏è M√âDICOS SERVICE - Eliminando m√©dico ID:',{endpoint:\"/medicos/\".concat(id),method:'DELETE',id:id,timestamp:new Date().toISOString()});await api.delete(\"/medicos/\".concat(id));console.log('‚úÖ M√âDICOS SERVICE - M√©dico eliminado exitosamente');},// Buscar m√©dicos por especialidad\nasync getMedicosByEspecialidad(especialidad){const response=await api.get(\"/medicos?especialidad=\".concat(especialidad));return response.data.data;}};","map":{"version":3,"names":["api","medicosService","getAllMedicos","response","get","data","getMedicoById","id","concat","createMedico","medicoData","console","log","endpoint","method","datos","timestamp","Date","toISOString","post","status","updateMedico","put","deleteMedico","delete","getMedicosByEspecialidad","especialidad"],"sources":["C:/Users/Asus/Documents/GitHub/proyecto-3-arquitectura/frontend/portal-web/src/services/medicosService.ts"],"sourcesContent":["import api from './api';\r\nimport { Medico } from '../contexts/AppContext';\r\n\r\nexport const medicosService = {\r\n  // Obtener todos los m√©dicos\r\n  async getAllMedicos(): Promise<Medico[]> {\r\n    const response = await api.get('/medicos');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obtener m√©dico por ID\r\n  async getMedicoById(id: number): Promise<Medico> {\r\n    const response = await api.get(`/medicos/${id}`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Crear nuevo m√©dico\r\n  async createMedico(medicoData: Omit<Medico, 'id' | 'createdAt' | 'updatedAt'>): Promise<Medico> {\r\n    console.log('üì§ M√âDICOS SERVICE - Enviando datos a /medicos:', {\r\n      endpoint: '/medicos',\r\n      method: 'POST',\r\n      datos: medicoData,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    const response = await api.post('/medicos', medicoData);\r\n    \r\n    console.log('üì• M√âDICOS SERVICE - Respuesta recibida:', {\r\n      status: response.status,\r\n      data: response.data,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    return response.data.data;\r\n  },\r\n\r\n  // Actualizar m√©dico\r\n  async updateMedico(id: number, medicoData: Partial<Medico>): Promise<Medico> {\r\n    console.log('üì§ M√âDICOS SERVICE - Enviando datos a /medicos/' + id + ':', {\r\n      endpoint: `/medicos/${id}`,\r\n      method: 'PUT',\r\n      datos: medicoData,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    const response = await api.put(`/medicos/${id}`, medicoData);\r\n    \r\n    console.log('üì• M√âDICOS SERVICE - Respuesta recibida:', {\r\n      status: response.status,\r\n      data: response.data,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    return response.data.data;\r\n  },\r\n\r\n  // Eliminar m√©dico (soft delete)\r\n  async deleteMedico(id: number): Promise<void> {\r\n    console.log('üóëÔ∏è M√âDICOS SERVICE - Eliminando m√©dico ID:', {\r\n      endpoint: `/medicos/${id}`,\r\n      method: 'DELETE',\r\n      id: id,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    await api.delete(`/medicos/${id}`);\r\n    \r\n    console.log('‚úÖ M√âDICOS SERVICE - M√©dico eliminado exitosamente');\r\n  },\r\n\r\n  // Buscar m√©dicos por especialidad\r\n  async getMedicosByEspecialidad(especialidad: string): Promise<Medico[]> {\r\n    const response = await api.get(`/medicos?especialidad=${especialidad}`);\r\n    return response.data.data;\r\n  },\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}