{"ast":null,"code":"import api from './api';\nexport const medicosService = {\n  // Obtener todos los m√©dicos\n  async getAllMedicos() {\n    const response = await api.get('/medicos');\n    return response.data.data;\n  },\n  // Obtener m√©dico por ID\n  async getMedicoById(id) {\n    const response = await api.get(`/medicos/${id}`);\n    return response.data.data;\n  },\n  // Crear nuevo m√©dico\n  async createMedico(medicoData) {\n    console.log('üì§ M√âDICOS SERVICE - Enviando datos a /medicos:', {\n      endpoint: '/medicos',\n      method: 'POST',\n      datos: medicoData,\n      timestamp: new Date().toISOString()\n    });\n    const response = await api.post('/medicos', medicoData);\n    console.log('üì• M√âDICOS SERVICE - Respuesta recibida:', {\n      status: response.status,\n      data: response.data,\n      timestamp: new Date().toISOString()\n    });\n    return response.data.data;\n  },\n  // Actualizar m√©dico\n  async updateMedico(id, medicoData) {\n    console.log('üì§ M√âDICOS SERVICE - Enviando datos a /medicos/' + id + ':', {\n      endpoint: `/medicos/${id}`,\n      method: 'PUT',\n      datos: medicoData,\n      timestamp: new Date().toISOString()\n    });\n    const response = await api.put(`/medicos/${id}`, medicoData);\n    console.log('üì• M√âDICOS SERVICE - Respuesta recibida:', {\n      status: response.status,\n      data: response.data,\n      timestamp: new Date().toISOString()\n    });\n    return response.data.data;\n  },\n  // Eliminar m√©dico (soft delete)\n  async deleteMedico(id) {\n    console.log('üóëÔ∏è M√âDICOS SERVICE - Eliminando m√©dico ID:', {\n      endpoint: `/medicos/${id}`,\n      method: 'DELETE',\n      id: id,\n      timestamp: new Date().toISOString()\n    });\n    await api.delete(`/medicos/${id}`);\n    console.log('‚úÖ M√âDICOS SERVICE - M√©dico eliminado exitosamente');\n  },\n  // Buscar m√©dicos por especialidad\n  async getMedicosByEspecialidad(especialidad) {\n    const response = await api.get(`/medicos?especialidad=${especialidad}`);\n    return response.data.data;\n  }\n};","map":{"version":3,"names":["api","medicosService","getAllMedicos","response","get","data","getMedicoById","id","createMedico","medicoData","console","log","endpoint","method","datos","timestamp","Date","toISOString","post","status","updateMedico","put","deleteMedico","delete","getMedicosByEspecialidad","especialidad"],"sources":["C:/Users/Asus/Documents/GitHub/proyecto-3-arquitectura/frontend/portal-web/src/services/medicosService.ts"],"sourcesContent":["import api from './api';\r\nimport { Medico } from '../contexts/AppContext';\r\n\r\nexport const medicosService = {\r\n  // Obtener todos los m√©dicos\r\n  async getAllMedicos(): Promise<Medico[]> {\r\n    const response = await api.get('/medicos');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obtener m√©dico por ID\r\n  async getMedicoById(id: number): Promise<Medico> {\r\n    const response = await api.get(`/medicos/${id}`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Crear nuevo m√©dico\r\n  async createMedico(medicoData: Omit<Medico, 'id' | 'createdAt' | 'updatedAt'>): Promise<Medico> {\r\n    console.log('üì§ M√âDICOS SERVICE - Enviando datos a /medicos:', {\r\n      endpoint: '/medicos',\r\n      method: 'POST',\r\n      datos: medicoData,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    const response = await api.post('/medicos', medicoData);\r\n    \r\n    console.log('üì• M√âDICOS SERVICE - Respuesta recibida:', {\r\n      status: response.status,\r\n      data: response.data,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    return response.data.data;\r\n  },\r\n\r\n  // Actualizar m√©dico\r\n  async updateMedico(id: number, medicoData: Partial<Medico>): Promise<Medico> {\r\n    console.log('üì§ M√âDICOS SERVICE - Enviando datos a /medicos/' + id + ':', {\r\n      endpoint: `/medicos/${id}`,\r\n      method: 'PUT',\r\n      datos: medicoData,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    const response = await api.put(`/medicos/${id}`, medicoData);\r\n    \r\n    console.log('üì• M√âDICOS SERVICE - Respuesta recibida:', {\r\n      status: response.status,\r\n      data: response.data,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    return response.data.data;\r\n  },\r\n\r\n  // Eliminar m√©dico (soft delete)\r\n  async deleteMedico(id: number): Promise<void> {\r\n    console.log('üóëÔ∏è M√âDICOS SERVICE - Eliminando m√©dico ID:', {\r\n      endpoint: `/medicos/${id}`,\r\n      method: 'DELETE',\r\n      id: id,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    await api.delete(`/medicos/${id}`);\r\n    \r\n    console.log('‚úÖ M√âDICOS SERVICE - M√©dico eliminado exitosamente');\r\n  },\r\n\r\n  // Buscar m√©dicos por especialidad\r\n  async getMedicosByEspecialidad(especialidad: string): Promise<Medico[]> {\r\n    const response = await api.get(`/medicos?especialidad=${especialidad}`);\r\n    return response.data.data;\r\n  },\r\n};\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAGvB,OAAO,MAAMC,cAAc,GAAG;EAC5B;EACA,MAAMC,aAAaA,CAAA,EAAsB;IACvC,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,UAAU,CAAC;IAC1C,OAAOD,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMC,aAAaA,CAACC,EAAU,EAAmB;IAC/C,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,YAAYG,EAAE,EAAE,CAAC;IAChD,OAAOJ,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMG,YAAYA,CAACC,UAA0D,EAAmB;IAC9FC,OAAO,CAACC,GAAG,CAAC,iDAAiD,EAAE;MAC7DC,QAAQ,EAAE,UAAU;MACpBC,MAAM,EAAE,MAAM;MACdC,KAAK,EAAEL,UAAU;MACjBM,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;IAEF,MAAMd,QAAQ,GAAG,MAAMH,GAAG,CAACkB,IAAI,CAAC,UAAU,EAAET,UAAU,CAAC;IAEvDC,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAE;MACtDQ,MAAM,EAAEhB,QAAQ,CAACgB,MAAM;MACvBd,IAAI,EAAEF,QAAQ,CAACE,IAAI;MACnBU,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;IAEF,OAAOd,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMe,YAAYA,CAACb,EAAU,EAAEE,UAA2B,EAAmB;IAC3EC,OAAO,CAACC,GAAG,CAAC,iDAAiD,GAAGJ,EAAE,GAAG,GAAG,EAAE;MACxEK,QAAQ,EAAE,YAAYL,EAAE,EAAE;MAC1BM,MAAM,EAAE,KAAK;MACbC,KAAK,EAAEL,UAAU;MACjBM,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;IAEF,MAAMd,QAAQ,GAAG,MAAMH,GAAG,CAACqB,GAAG,CAAC,YAAYd,EAAE,EAAE,EAAEE,UAAU,CAAC;IAE5DC,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAE;MACtDQ,MAAM,EAAEhB,QAAQ,CAACgB,MAAM;MACvBd,IAAI,EAAEF,QAAQ,CAACE,IAAI;MACnBU,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;IAEF,OAAOd,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMiB,YAAYA,CAACf,EAAU,EAAiB;IAC5CG,OAAO,CAACC,GAAG,CAAC,6CAA6C,EAAE;MACzDC,QAAQ,EAAE,YAAYL,EAAE,EAAE;MAC1BM,MAAM,EAAE,QAAQ;MAChBN,EAAE,EAAEA,EAAE;MACNQ,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC,CAAC;IAEF,MAAMjB,GAAG,CAACuB,MAAM,CAAC,YAAYhB,EAAE,EAAE,CAAC;IAElCG,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;EAClE,CAAC;EAED;EACA,MAAMa,wBAAwBA,CAACC,YAAoB,EAAqB;IACtE,MAAMtB,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,yBAAyBqB,YAAY,EAAE,CAAC;IACvE,OAAOtB,QAAQ,CAACE,IAAI,CAACA,IAAI;EAC3B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}