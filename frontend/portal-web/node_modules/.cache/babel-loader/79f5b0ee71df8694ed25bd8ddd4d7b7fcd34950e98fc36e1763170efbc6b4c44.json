{"ast":null,"code":"import api from './api';\nexport const pacientesService = {\n  // Obtener todos los pacientes\n  async getAllPacientes() {\n    const response = await api.get('/pacientes');\n    return response.data.data;\n  },\n  // Obtener paciente por ID\n  async getPacienteById(id) {\n    const response = await api.get(`/pacientes/${id}`);\n    return response.data.data;\n  },\n  // Obtener paciente por DNI\n  async getPacienteByDNI(dni) {\n    const response = await api.get(`/pacientes/dni/${dni}`);\n    return response.data.data;\n  },\n  // Crear nuevo paciente\n  async createPaciente(pacienteData) {\n    console.log('üì§ PACIENTES SERVICE - Enviando datos a /pacientes:', {\n      endpoint: '/pacientes',\n      method: 'POST',\n      datos: pacienteData,\n      timestamp: new Date().toISOString()\n    });\n    const response = await api.post('/pacientes', pacienteData);\n    console.log('üì• PACIENTES SERVICE - Respuesta recibida:', {\n      status: response.status,\n      data: response.data,\n      timestamp: new Date().toISOString()\n    });\n    return response.data.data;\n  },\n  // Actualizar paciente\n  async updatePaciente(id, pacienteData) {\n    console.log('üì§ PACIENTES SERVICE - Enviando datos a /pacientes/' + id + ':', {\n      endpoint: `/pacientes/${id}`,\n      method: 'PUT',\n      datos: pacienteData,\n      timestamp: new Date().toISOString()\n    });\n    const response = await api.put(`/pacientes/${id}`, pacienteData);\n    console.log('üì• PACIENTES SERVICE - Respuesta recibida:', {\n      status: response.status,\n      data: response.data,\n      timestamp: new Date().toISOString()\n    });\n    return response.data.data;\n  },\n  // Eliminar paciente\n  async deletePaciente(id) {\n    console.log('üóëÔ∏è PACIENTES SERVICE - Eliminando paciente ID:', {\n      endpoint: `/pacientes/${id}`,\n      method: 'DELETE',\n      id: id,\n      timestamp: new Date().toISOString()\n    });\n    await api.delete(`/pacientes/${id}`);\n    console.log('‚úÖ PACIENTES SERVICE - Paciente eliminado exitosamente');\n  },\n  // Buscar pacientes\n  async searchPacientes(query) {\n    const response = await api.get(`/pacientes?search=${query}`);\n    return response.data.data;\n  }\n};","map":{"version":3,"names":["api","pacientesService","getAllPacientes","response","get","data","getPacienteById","id","getPacienteByDNI","dni","createPaciente","pacienteData","console","log","endpoint","method","datos","timestamp","Date","toISOString","post","status","updatePaciente","put","deletePaciente","delete","searchPacientes","query"],"sources":["C:/Users/Asus/Documents/GitHub/proyecto-3-arquitectura/frontend/portal-web/src/services/pacientesService.ts"],"sourcesContent":["import api from './api';\r\nimport { Paciente } from '../contexts/AppContext';\r\n\r\nexport const pacientesService = {\r\n  // Obtener todos los pacientes\r\n  async getAllPacientes(): Promise<Paciente[]> {\r\n    const response = await api.get('/pacientes');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obtener paciente por ID\r\n  async getPacienteById(id: number): Promise<Paciente> {\r\n    const response = await api.get(`/pacientes/${id}`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obtener paciente por DNI\r\n  async getPacienteByDNI(dni: string): Promise<Paciente> {\r\n    const response = await api.get(`/pacientes/dni/${dni}`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Crear nuevo paciente\r\n  async createPaciente(pacienteData: Omit<Paciente, 'id' | 'createdAt' | 'updatedAt'>): Promise<Paciente> {\r\n    console.log('üì§ PACIENTES SERVICE - Enviando datos a /pacientes:', {\r\n      endpoint: '/pacientes',\r\n      method: 'POST',\r\n      datos: pacienteData,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    const response = await api.post('/pacientes', pacienteData);\r\n    \r\n    console.log('üì• PACIENTES SERVICE - Respuesta recibida:', {\r\n      status: response.status,\r\n      data: response.data,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    return response.data.data;\r\n  },\r\n\r\n  // Actualizar paciente\r\n  async updatePaciente(id: number, pacienteData: Partial<Paciente>): Promise<Paciente> {\r\n    console.log('üì§ PACIENTES SERVICE - Enviando datos a /pacientes/' + id + ':', {\r\n      endpoint: `/pacientes/${id}`,\r\n      method: 'PUT',\r\n      datos: pacienteData,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    const response = await api.put(`/pacientes/${id}`, pacienteData);\r\n    \r\n    console.log('üì• PACIENTES SERVICE - Respuesta recibida:', {\r\n      status: response.status,\r\n      data: response.data,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    return response.data.data;\r\n  },\r\n\r\n  // Eliminar paciente\r\n  async deletePaciente(id: number): Promise<void> {\r\n    console.log('üóëÔ∏è PACIENTES SERVICE - Eliminando paciente ID:', {\r\n      endpoint: `/pacientes/${id}`,\r\n      method: 'DELETE',\r\n      id: id,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    await api.delete(`/pacientes/${id}`);\r\n    \r\n    console.log('‚úÖ PACIENTES SERVICE - Paciente eliminado exitosamente');\r\n  },\r\n\r\n  // Buscar pacientes\r\n  async searchPacientes(query: string): Promise<Paciente[]> {\r\n    const response = await api.get(`/pacientes?search=${query}`);\r\n    return response.data.data;\r\n  },\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}