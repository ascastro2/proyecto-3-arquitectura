{"ast":null,"code":"import api from'./api';export const turnosService={// Obtener todos los turnos\nasync getAllTurnos(){const response=await api.get('/agendamiento/turnos');return response.data.data;},// Obtener turno por ID\nasync getTurnoById(id){const response=await api.get(\"/agendamiento/turnos/\".concat(id));return response.data.data;},// Crear nuevo turno\nasync createTurno(turnoData){console.log('ðŸ“¤ TURNOS SERVICE - Enviando datos a /turnos:',{endpoint:'/turnos',method:'POST',datos:turnoData,timestamp:new Date().toISOString()});const response=await api.post('/turnos',turnoData);console.log('ðŸ“¥ TURNOS SERVICE - Respuesta recibida:',{status:response.status,data:response.data,timestamp:new Date().toISOString()});return response.data.data;},// Actualizar turno\nasync updateTurno(id,turnoData){console.log('ðŸ“¤ TURNOS SERVICE - Enviando datos a /turnos/'+id+':',{endpoint:\"/turnos/\".concat(id),method:'PUT',datos:turnoData,timestamp:new Date().toISOString()});const response=await api.put(\"/turnos/\".concat(id),turnoData);console.log('ðŸ“¥ TURNOS SERVICE - Respuesta recibida:',{status:response.status,data:response.data,timestamp:new Date().toISOString()});return response.data.data;},// Confirmar turno\nasync confirmarTurno(id){const response=await api.patch(\"/agendamiento/turnos/\".concat(id,\"/confirmar\"),{});return response.data.data;},// Cancelar turno\nasync cancelarTurno(id,motivo){const response=await api.patch(\"/agendamiento/turnos/\".concat(id,\"/cancelar\"),{motivo});return response.data.data;},// Completar turno\nasync completarTurno(id){const response=await api.patch(\"/agendamiento/turnos/\".concat(id,\"/completar\"),{});return response.data.data;},// Marcar como no show\nasync marcarNoShow(id){const response=await api.patch(\"/agendamiento/turnos/\".concat(id,\"/no-show\"),{});return response.data.data;},// Buscar disponibilidad\nasync buscarDisponibilidad(medicoId,fecha){const response=await api.get(\"/agendamiento/disponibilidad?medicoId=\".concat(medicoId,\"&fecha=\").concat(fecha));return response.data.data;},// Obtener turnos por paciente\nasync getTurnosByPaciente(pacienteId){const response=await api.get(\"/agendamiento/turnos?pacienteId=\".concat(pacienteId));return response.data.data.turnos;},// Obtener turnos por mÃ©dico\nasync getTurnosByMedico(medicoId){const response=await api.get(\"/agendamiento/turnos?medicoId=\".concat(medicoId));return response.data.data.turnos;}};","map":{"version":3,"names":["api","turnosService","getAllTurnos","response","get","data","getTurnoById","id","concat","createTurno","turnoData","console","log","endpoint","method","datos","timestamp","Date","toISOString","post","status","updateTurno","put","confirmarTurno","patch","cancelarTurno","motivo","completarTurno","marcarNoShow","buscarDisponibilidad","medicoId","fecha","getTurnosByPaciente","pacienteId","turnos","getTurnosByMedico"],"sources":["C:/Users/Asus/Documents/GitHub/proyecto-3-arquitectura/frontend/portal-web/src/services/turnosService.ts"],"sourcesContent":["import api from './api';\r\nimport { Turno } from '../contexts/AppContext';\r\n\r\nexport const turnosService = {\r\n  // Obtener todos los turnos\r\n  async getAllTurnos(): Promise<{ turnos: Turno[]; pagination: any }> {\r\n    const response = await api.get('/agendamiento/turnos');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obtener turno por ID\r\n  async getTurnoById(id: number): Promise<Turno> {\r\n    const response = await api.get(`/agendamiento/turnos/${id}`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Crear nuevo turno\r\n  async createTurno(turnoData: Omit<Turno, 'id' | 'createdAt' | 'updatedAt'>): Promise<Turno> {\r\n    console.log('ðŸ“¤ TURNOS SERVICE - Enviando datos a /turnos:', {\r\n      endpoint: '/turnos',\r\n      method: 'POST',\r\n      datos: turnoData,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    const response = await api.post('/turnos', turnoData);\r\n    \r\n    console.log('ðŸ“¥ TURNOS SERVICE - Respuesta recibida:', {\r\n      status: response.status,\r\n      data: response.data,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    return response.data.data;\r\n  },\r\n\r\n  // Actualizar turno\r\n  async updateTurno(id: number, turnoData: Partial<Turno>): Promise<Turno> {\r\n    console.log('ðŸ“¤ TURNOS SERVICE - Enviando datos a /turnos/' + id + ':', {\r\n      endpoint: `/turnos/${id}`,\r\n      method: 'PUT',\r\n      datos: turnoData,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    const response = await api.put(`/turnos/${id}`, turnoData);\r\n    \r\n    console.log('ðŸ“¥ TURNOS SERVICE - Respuesta recibida:', {\r\n      status: response.status,\r\n      data: response.data,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    return response.data.data;\r\n  },\r\n\r\n  // Confirmar turno\r\n  async confirmarTurno(id: number): Promise<Turno> {\r\n    const response = await api.patch(`/agendamiento/turnos/${id}/confirmar`, {});\r\n    return response.data.data;\r\n  },\r\n\r\n  // Cancelar turno\r\n  async cancelarTurno(id: number, motivo: string): Promise<Turno> {\r\n    const response = await api.patch(`/agendamiento/turnos/${id}/cancelar`, { motivo });\r\n    return response.data.data;\r\n  },\r\n\r\n  // Completar turno\r\n  async completarTurno(id: number): Promise<Turno> {\r\n    const response = await api.patch(`/agendamiento/turnos/${id}/completar`, {});\r\n    return response.data.data;\r\n  },\r\n\r\n  // Marcar como no show\r\n  async marcarNoShow(id: number): Promise<Turno> {\r\n    const response = await api.patch(`/agendamiento/turnos/${id}/no-show`, {});\r\n    return response.data.data;\r\n  },\r\n\r\n  // Buscar disponibilidad\r\n  async buscarDisponibilidad(medicoId: number, fecha: string): Promise<any> {\r\n    const response = await api.get(`/agendamiento/disponibilidad?medicoId=${medicoId}&fecha=${fecha}`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obtener turnos por paciente\r\n  async getTurnosByPaciente(pacienteId: number): Promise<Turno[]> {\r\n    const response = await api.get(`/agendamiento/turnos?pacienteId=${pacienteId}`);\r\n    return response.data.data.turnos;\r\n  },\r\n\r\n  // Obtener turnos por mÃ©dico\r\n  async getTurnosByMedico(medicoId: number): Promise<Turno[]> {\r\n    const response = await api.get(`/agendamiento/turnos?medicoId=${medicoId}`);\r\n    return response.data.data.turnos;\r\n  },\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}