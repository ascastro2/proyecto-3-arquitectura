{"ast":null,"code":"import api from './api';\nexport const turnosService = {\n  // Obtener todos los turnos\n  async getAllTurnos() {\n    const response = await api.get('/agendamiento/turnos');\n    return response.data.data;\n  },\n  // Obtener turno por ID\n  async getTurnoById(id) {\n    const response = await api.get(`/agendamiento/turnos/${id}`);\n    return response.data.data;\n  },\n  // Crear nuevo turno\n  async createTurno(turnoData) {\n    console.log('ðŸ“¤ TURNOS SERVICE - Enviando datos a /agendamiento/turnos:', {\n      endpoint: '/agendamiento/turnos',\n      method: 'POST',\n      datos: turnoData,\n      timestamp: new Date().toISOString()\n    });\n    const response = await api.post('/agendamiento/turnos', turnoData);\n    console.log('ðŸ“¥ TURNOS SERVICE - Respuesta recibida:', {\n      status: response.status,\n      data: response.data,\n      timestamp: new Date().toISOString()\n    });\n    return response.data.data;\n  },\n  // Actualizar turno\n  async updateTurno(id, turnoData) {\n    console.log('ðŸ“¤ TURNOS SERVICE - Enviando datos a /turnos/' + id + ':', {\n      endpoint: `/agendamiento/turnos/${id}`,\n      method: 'PUT',\n      datos: turnoData,\n      timestamp: new Date().toISOString()\n    });\n    const response = await api.put(`/agendamiento/turnos/${id}`, turnoData);\n    console.log('ðŸ“¥ TURNOS SERVICE - Respuesta recibida:', {\n      status: response.status,\n      data: response.data,\n      timestamp: new Date().toISOString()\n    });\n    return response.data.data;\n  },\n  // Confirmar turno\n  async confirmarTurno(id) {\n    const response = await api.patch(`/agendamiento/turnos/${id}/confirmar`, {});\n    return response.data.data;\n  },\n  // Cancelar turno\n  async cancelarTurno(id, motivo) {\n    const response = await api.patch(`/agendamiento/turnos/${id}/cancelar`, {\n      motivo\n    });\n    return response.data.data;\n  },\n  // Completar turno\n  async completarTurno(id) {\n    const response = await api.patch(`/agendamiento/turnos/${id}/completar`, {});\n    return response.data.data;\n  },\n  // Marcar como no show\n  async marcarNoShow(id) {\n    const response = await api.patch(`/agendamiento/turnos/${id}/no-show`, {});\n    return response.data.data;\n  },\n  // Buscar disponibilidad\n  async buscarDisponibilidad(medicoId, fecha) {\n    const response = await api.get(`/agendamiento/disponibilidad?medicoId=${medicoId}&fecha=${fecha}`);\n    return response.data.data;\n  },\n  // Obtener turnos por paciente\n  async getTurnosByPaciente(pacienteId) {\n    const response = await api.get(`/agendamiento/turnos?pacienteId=${pacienteId}`);\n    return response.data.data.turnos;\n  },\n  // Obtener turnos por mÃ©dico\n  async getTurnosByMedico(medicoId) {\n    const response = await api.get(`/agendamiento/turnos?medicoId=${medicoId}`);\n    return response.data.data.turnos;\n  }\n};","map":{"version":3,"names":["api","turnosService","getAllTurnos","response","get","data","getTurnoById","id","createTurno","turnoData","console","log","endpoint","method","datos","timestamp","Date","toISOString","post","status","updateTurno","put","confirmarTurno","patch","cancelarTurno","motivo","completarTurno","marcarNoShow","buscarDisponibilidad","medicoId","fecha","getTurnosByPaciente","pacienteId","turnos","getTurnosByMedico"],"sources":["C:/Users/Asus/Documents/GitHub/proyecto-3-arquitectura/frontend/portal-web/src/services/turnosService.ts"],"sourcesContent":["import api from './api';\r\nimport { Turno } from '../contexts/AppContext';\r\n\r\nexport const turnosService = {\r\n  // Obtener todos los turnos\r\n  async getAllTurnos(): Promise<{ turnos: Turno[]; pagination: any }> {\r\n    const response = await api.get('/agendamiento/turnos');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obtener turno por ID\r\n  async getTurnoById(id: number): Promise<Turno> {\r\n    const response = await api.get(`/agendamiento/turnos/${id}`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Crear nuevo turno\r\n  async createTurno(turnoData: Omit<Turno, 'id' | 'createdAt' | 'updatedAt'>): Promise<Turno> {\r\n    console.log('ðŸ“¤ TURNOS SERVICE - Enviando datos a /agendamiento/turnos:', {\r\n      endpoint: '/agendamiento/turnos',\r\n      method: 'POST',\r\n      datos: turnoData,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    const response = await api.post('/agendamiento/turnos', turnoData);\r\n    \r\n    console.log('ðŸ“¥ TURNOS SERVICE - Respuesta recibida:', {\r\n      status: response.status,\r\n      data: response.data,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    return response.data.data;\r\n  },\r\n\r\n  // Actualizar turno\r\n  async updateTurno(id: number, turnoData: Partial<Turno>): Promise<Turno> {\r\n    console.log('ðŸ“¤ TURNOS SERVICE - Enviando datos a /turnos/' + id + ':', {\r\n      endpoint: `/agendamiento/turnos/${id}`,\r\n      method: 'PUT',\r\n      datos: turnoData,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    const response = await api.put(`/agendamiento/turnos/${id}`, turnoData);\r\n    \r\n    console.log('ðŸ“¥ TURNOS SERVICE - Respuesta recibida:', {\r\n      status: response.status,\r\n      data: response.data,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    return response.data.data;\r\n  },\r\n\r\n  // Confirmar turno\r\n  async confirmarTurno(id: number): Promise<Turno> {\r\n    const response = await api.patch(`/agendamiento/turnos/${id}/confirmar`, {});\r\n    return response.data.data;\r\n  },\r\n\r\n  // Cancelar turno\r\n  async cancelarTurno(id: number, motivo: string): Promise<Turno> {\r\n    const response = await api.patch(`/agendamiento/turnos/${id}/cancelar`, { motivo });\r\n    return response.data.data;\r\n  },\r\n\r\n  // Completar turno\r\n  async completarTurno(id: number): Promise<Turno> {\r\n    const response = await api.patch(`/agendamiento/turnos/${id}/completar`, {});\r\n    return response.data.data;\r\n  },\r\n\r\n  // Marcar como no show\r\n  async marcarNoShow(id: number): Promise<Turno> {\r\n    const response = await api.patch(`/agendamiento/turnos/${id}/no-show`, {});\r\n    return response.data.data;\r\n  },\r\n\r\n  // Buscar disponibilidad\r\n  async buscarDisponibilidad(medicoId: number, fecha: string): Promise<any> {\r\n    const response = await api.get(`/agendamiento/disponibilidad?medicoId=${medicoId}&fecha=${fecha}`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obtener turnos por paciente\r\n  async getTurnosByPaciente(pacienteId: number): Promise<Turno[]> {\r\n    const response = await api.get(`/agendamiento/turnos?pacienteId=${pacienteId}`);\r\n    return response.data.data.turnos;\r\n  },\r\n\r\n  // Obtener turnos por mÃ©dico\r\n  async getTurnosByMedico(medicoId: number): Promise<Turno[]> {\r\n    const response = await api.get(`/agendamiento/turnos?medicoId=${medicoId}`);\r\n    return response.data.data.turnos;\r\n  },\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}