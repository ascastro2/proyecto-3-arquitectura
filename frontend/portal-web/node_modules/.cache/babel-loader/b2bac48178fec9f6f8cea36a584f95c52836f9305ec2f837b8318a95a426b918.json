{"ast":null,"code":"import api from'./api';export const pacientesService={// Obtener todos los pacientes\nasync getAllPacientes(){const response=await api.get('/pacientes');return response.data.data;},// Obtener paciente por ID\nasync getPacienteById(id){const response=await api.get(\"/pacientes/\".concat(id));return response.data.data;},// Obtener paciente por DNI\nasync getPacienteByDNI(dni){const response=await api.get(\"/pacientes/dni/\".concat(dni));return response.data.data;},// Crear nuevo paciente\nasync createPaciente(pacienteData){console.log('üì§ PACIENTES SERVICE - Enviando datos a /pacientes:',{endpoint:'/pacientes',method:'POST',datos:pacienteData,timestamp:new Date().toISOString()});const response=await api.post('/pacientes',pacienteData);console.log('üì• PACIENTES SERVICE - Respuesta recibida:',{status:response.status,data:response.data,timestamp:new Date().toISOString()});return response.data.data;},// Actualizar paciente\nasync updatePaciente(id,pacienteData){console.log('üì§ PACIENTES SERVICE - Enviando datos a /pacientes/'+id+':',{endpoint:\"/pacientes/\".concat(id),method:'PUT',datos:pacienteData,timestamp:new Date().toISOString()});const response=await api.put(\"/pacientes/\".concat(id),pacienteData);console.log('üì• PACIENTES SERVICE - Respuesta recibida:',{status:response.status,data:response.data,timestamp:new Date().toISOString()});return response.data.data;},// Eliminar paciente\nasync deletePaciente(id){console.log('üóëÔ∏è PACIENTES SERVICE - Eliminando paciente ID:',{endpoint:\"/pacientes/\".concat(id),method:'DELETE',id:id,timestamp:new Date().toISOString()});await api.delete(\"/pacientes/\".concat(id));console.log('‚úÖ PACIENTES SERVICE - Paciente eliminado exitosamente');},// Buscar pacientes\nasync searchPacientes(query){const response=await api.get(\"/pacientes?search=\".concat(query));return response.data.data;}};","map":{"version":3,"names":["api","pacientesService","getAllPacientes","response","get","data","getPacienteById","id","concat","getPacienteByDNI","dni","createPaciente","pacienteData","console","log","endpoint","method","datos","timestamp","Date","toISOString","post","status","updatePaciente","put","deletePaciente","delete","searchPacientes","query"],"sources":["C:/Users/Asus/Documents/GitHub/proyecto-3-arquitectura/frontend/portal-web/src/services/pacientesService.ts"],"sourcesContent":["import api from './api';\r\nimport { Paciente } from '../contexts/AppContext';\r\n\r\nexport const pacientesService = {\r\n  // Obtener todos los pacientes\r\n  async getAllPacientes(): Promise<Paciente[]> {\r\n    const response = await api.get('/pacientes');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obtener paciente por ID\r\n  async getPacienteById(id: number): Promise<Paciente> {\r\n    const response = await api.get(`/pacientes/${id}`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obtener paciente por DNI\r\n  async getPacienteByDNI(dni: string): Promise<Paciente> {\r\n    const response = await api.get(`/pacientes/dni/${dni}`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Crear nuevo paciente\r\n  async createPaciente(pacienteData: Omit<Paciente, 'id' | 'createdAt' | 'updatedAt'>): Promise<Paciente> {\r\n    console.log('üì§ PACIENTES SERVICE - Enviando datos a /pacientes:', {\r\n      endpoint: '/pacientes',\r\n      method: 'POST',\r\n      datos: pacienteData,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    const response = await api.post('/pacientes', pacienteData);\r\n    \r\n    console.log('üì• PACIENTES SERVICE - Respuesta recibida:', {\r\n      status: response.status,\r\n      data: response.data,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    return response.data.data;\r\n  },\r\n\r\n  // Actualizar paciente\r\n  async updatePaciente(id: number, pacienteData: Partial<Paciente>): Promise<Paciente> {\r\n    console.log('üì§ PACIENTES SERVICE - Enviando datos a /pacientes/' + id + ':', {\r\n      endpoint: `/pacientes/${id}`,\r\n      method: 'PUT',\r\n      datos: pacienteData,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    const response = await api.put(`/pacientes/${id}`, pacienteData);\r\n    \r\n    console.log('üì• PACIENTES SERVICE - Respuesta recibida:', {\r\n      status: response.status,\r\n      data: response.data,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    return response.data.data;\r\n  },\r\n\r\n  // Eliminar paciente\r\n  async deletePaciente(id: number): Promise<void> {\r\n    console.log('üóëÔ∏è PACIENTES SERVICE - Eliminando paciente ID:', {\r\n      endpoint: `/pacientes/${id}`,\r\n      method: 'DELETE',\r\n      id: id,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    await api.delete(`/pacientes/${id}`);\r\n    \r\n    console.log('‚úÖ PACIENTES SERVICE - Paciente eliminado exitosamente');\r\n  },\r\n\r\n  // Buscar pacientes\r\n  async searchPacientes(query: string): Promise<Paciente[]> {\r\n    const response = await api.get(`/pacientes?search=${query}`);\r\n    return response.data.data;\r\n  },\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}