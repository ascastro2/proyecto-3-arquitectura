{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus\\\\Documents\\\\GitHub\\\\proyecto-3-arquitectura\\\\frontend\\\\portal-web\\\\src\\\\contexts\\\\AppContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer } from 'react';\n\n// Tipos\n\n// Estado inicial\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  pacientes: [],\n  medicos: [],\n  turnos: [],\n  notificaciones: [],\n  historial: [],\n  loading: false,\n  error: null\n};\n\n// Acciones\n\n// Reducer\nfunction appReducer(state, action) {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload\n      };\n    case 'SET_PACIENTES':\n      return {\n        ...state,\n        pacientes: action.payload\n      };\n    case 'ADD_PACIENTE':\n      return {\n        ...state,\n        pacientes: [...state.pacientes, action.payload]\n      };\n    case 'UPDATE_PACIENTE':\n      return {\n        ...state,\n        pacientes: state.pacientes.map(p => p.id === action.payload.id ? action.payload : p)\n      };\n    case 'SET_MEDICOS':\n      return {\n        ...state,\n        medicos: action.payload\n      };\n    case 'ADD_MEDICO':\n      return {\n        ...state,\n        medicos: [...state.medicos, action.payload]\n      };\n    case 'UPDATE_MEDICO':\n      return {\n        ...state,\n        medicos: state.medicos.map(m => m.id === action.payload.id ? action.payload : m)\n      };\n    case 'SET_TURNOS':\n      return {\n        ...state,\n        turnos: action.payload\n      };\n    case 'ADD_TURNO':\n      return {\n        ...state,\n        turnos: [...state.turnos, action.payload]\n      };\n    case 'UPDATE_TURNO':\n      return {\n        ...state,\n        turnos: state.turnos.map(t => t.id === action.payload.id ? action.payload : t)\n      };\n    case 'SET_NOTIFICACIONES':\n      return {\n        ...state,\n        notificaciones: action.payload\n      };\n    case 'SET_HISTORIAL':\n      return {\n        ...state,\n        historial: action.payload\n      };\n    default:\n      return state;\n  }\n}\n\n// Context\n\nconst AppContext = /*#__PURE__*/createContext(undefined);\n\n// Provider\nexport function AppProvider({\n  children\n}) {\n  _s();\n  const [state, dispatch] = useReducer(appReducer, initialState);\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n}\n\n// Hook personalizado\n_s(AppProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = AppProvider;\nexport function useApp() {\n  _s2();\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n}\n_s2(useApp, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","jsxDEV","_jsxDEV","initialState","pacientes","medicos","turnos","notificaciones","historial","loading","error","appReducer","state","action","type","payload","map","p","id","m","t","AppContext","undefined","AppProvider","children","_s","dispatch","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useApp","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/Asus/Documents/GitHub/proyecto-3-arquitectura/frontend/portal-web/src/contexts/AppContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, ReactNode } from 'react';\r\n\r\n// Tipos\r\nexport interface Paciente {\r\n  id: number;\r\n  dni: string;\r\n  nombre: string;\r\n  apellido: string;\r\n  email: string;\r\n  telefono: string;\r\n  fechaNacimiento: string;\r\n  direccion: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface Medico {\r\n  id: number;\r\n  matricula: string;\r\n  nombre: string;\r\n  apellido: string;\r\n  especialidad: string;\r\n  email: string;\r\n  telefono: string;\r\n  fechaNacimiento: string;\r\n  direccion: string;\r\n  activo: boolean;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface Turno {\r\n  id: number;\r\n  pacienteId: number;\r\n  medicoId: number;\r\n  fecha: string;\r\n  hora: string;\r\n  diaSemana: number;\r\n  estado: 'PENDIENTE' | 'CONFIRMADO' | 'CANCELADO' | 'COMPLETADO' | 'NO_SHOW';\r\n  motivo: string;\r\n  observaciones: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface Notificacion {\r\n  id: number;\r\n  tipo: string;\r\n  mensaje: string;\r\n  destinatario: string;\r\n  canal: 'EMAIL' | 'SMS';\r\n  estado: 'PENDIENTE' | 'ENVIADA' | 'ERROR';\r\n  createdAt: string;\r\n}\r\n\r\nexport interface HistorialCambio {\r\n  id: number;\r\n  turnoId: number;\r\n  tipoCambio: string;\r\n  descripcion: string;\r\n  usuarioId: number | null;\r\n  datosAnteriores: any;\r\n  datosNuevos: any;\r\n  fechaCambio: string;\r\n}\r\n\r\n// Estado inicial\r\ninterface AppState {\r\n  pacientes: Paciente[];\r\n  medicos: Medico[];\r\n  turnos: Turno[];\r\n  notificaciones: Notificacion[];\r\n  historial: HistorialCambio[];\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: AppState = {\r\n  pacientes: [],\r\n  medicos: [],\r\n  turnos: [],\r\n  notificaciones: [],\r\n  historial: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\n// Acciones\r\ntype AppAction =\r\n  | { type: 'SET_LOADING'; payload: boolean }\r\n  | { type: 'SET_ERROR'; payload: string | null }\r\n  | { type: 'SET_PACIENTES'; payload: Paciente[] }\r\n  | { type: 'ADD_PACIENTE'; payload: Paciente }\r\n  | { type: 'UPDATE_PACIENTE'; payload: Paciente }\r\n  | { type: 'SET_MEDICOS'; payload: Medico[] }\r\n  | { type: 'ADD_MEDICO'; payload: Medico }\r\n  | { type: 'UPDATE_MEDICO'; payload: Medico }\r\n  | { type: 'SET_TURNOS'; payload: Turno[] }\r\n  | { type: 'ADD_TURNO'; payload: Turno }\r\n  | { type: 'UPDATE_TURNO'; payload: Turno }\r\n  | { type: 'SET_NOTIFICACIONES'; payload: Notificacion[] }\r\n  | { type: 'SET_HISTORIAL'; payload: HistorialCambio[] };\r\n\r\n// Reducer\r\nfunction appReducer(state: AppState, action: AppAction): AppState {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, loading: action.payload };\r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload };\r\n    case 'SET_PACIENTES':\r\n      return { ...state, pacientes: action.payload };\r\n    case 'ADD_PACIENTE':\r\n      return { ...state, pacientes: [...state.pacientes, action.payload] };\r\n    case 'UPDATE_PACIENTE':\r\n      return {\r\n        ...state,\r\n        pacientes: state.pacientes.map(p => p.id === action.payload.id ? action.payload : p)\r\n      };\r\n    case 'SET_MEDICOS':\r\n      return { ...state, medicos: action.payload };\r\n    case 'ADD_MEDICO':\r\n      return { ...state, medicos: [...state.medicos, action.payload] };\r\n    case 'UPDATE_MEDICO':\r\n      return {\r\n        ...state,\r\n        medicos: state.medicos.map(m => m.id === action.payload.id ? action.payload : m)\r\n      };\r\n    case 'SET_TURNOS':\r\n      return { ...state, turnos: action.payload };\r\n    case 'ADD_TURNO':\r\n      return { ...state, turnos: [...state.turnos, action.payload] };\r\n    case 'UPDATE_TURNO':\r\n      return {\r\n        ...state,\r\n        turnos: state.turnos.map(t => t.id === action.payload.id ? action.payload : t)\r\n      };\r\n    case 'SET_NOTIFICACIONES':\r\n      return { ...state, notificaciones: action.payload };\r\n    case 'SET_HISTORIAL':\r\n      return { ...state, historial: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// Context\r\ninterface AppContextType {\r\n  state: AppState;\r\n  dispatch: React.Dispatch<AppAction>;\r\n}\r\n\r\nconst AppContext = createContext<AppContextType | undefined>(undefined);\r\n\r\n// Provider\r\nexport function AppProvider({ children }: { children: ReactNode }) {\r\n  const [state, dispatch] = useReducer(appReducer, initialState);\r\n\r\n  return (\r\n    <AppContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n}\r\n\r\n// Hook personalizado\r\nexport function useApp() {\r\n  const context = useContext(AppContext);\r\n  if (context === undefined) {\r\n    throw new Error('useApp must be used within an AppProvider');\r\n  }\r\n  return context;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}